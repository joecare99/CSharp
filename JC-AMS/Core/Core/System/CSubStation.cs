// ***********************************************************************
// Assembly         : JCAMS
// Author           : Mir
// Created          : 12-19-2021
//
// Last Modified By : Mir
// Last Modified On : 10-17-2022
// ***********************************************************************
// <copyright file="CSubStation.cs" company="JC-Soft">
//     Copyright © JC-Soft 2008-2015
// </copyright>
// <summary></summary>
// ***********************************************************************
using JCAMS.Core.DataOperations;
using JCAMS.Core.System.Values;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

/// <summary>
/// The System namespace.
/// </summary>
/// <autogeneratedoc />
namespace JCAMS.Core.System
{
    /// <summary>
    /// Class SSubstation.
    /// </summary>
    [Serializable]
    public class CSubStation : CPropNotificationClass, IHasParent , IHasID , IXmlSerializable, IHasDescription
    {
        #region Properties
        #region private properties
        /// <summary>
        /// The identifier sub station
        /// </summary>
        /// <autogeneratedoc />
        private long _idSubStation;
        /// <summary>
        /// The description
        /// </summary>
        /// <autogeneratedoc />
        private string _Description;
        #endregion
        /// <summary>
        /// The identifier substation
        /// </summary>
        /// <value>The identifier sub station.</value>
        public long idSubStation { get => _idSubStation; private set => SetValue(value, ref _idSubStation , OnChangeIdSubStation); }


        /// <summary>
        /// The description
        /// </summary>
        /// <value>The description.</value>
        public string Description { get=>_Description; private set => SetValue(value, ref _Description); }

        /// <summary>
        /// The identifier of the station
        /// </summary>
        /// <value>The identifier station.</value>
        public long idStation { get => Station?.idStation ?? -1; }
        /// <summary>
        /// Gets station.
        /// </summary>
        /// <value>The station.</value>
        /// <autogeneratedoc />
        public CStation Station { get; private set; }

        /// <summary>
        /// The values of this instance. Contains ALL values of this instance (flat).
        /// </summary>
        public Dictionary<string, CSystemValue> Values = new Dictionary<string, CSystemValue>();

        #region static properties
        // Some "well known" SubStations
        /// <summary>
        /// Gets the system.
        /// </summary>
        /// <value>The system.</value>
        /// <autogeneratedoc />
        public static CSubStation System { get; private set; }

        /// <summary>
        /// The sub stations
        /// </summary>
        /// <autogeneratedoc />
        public static Dictionary<long, CSubStation> SubStations = new Dictionary<long, CSubStation>();
        #endregion

        #region Interface properties
        /// <summary>
        /// Gets or sets the parent.
        /// </summary>
        /// <value>The parent.</value>
        /// <autogeneratedoc />
        object IHasParent.Parent { get => Station; set { if (value is CStation cs) Station = cs; } }

        /// <summary>
        /// Gets the identifier.
        /// </summary>
        /// <value>The identifier.</value>
        /// <autogeneratedoc />
        long IHasID.ID => idSubStation;
        #endregion
        #endregion
        #region Methods
        /// <summary>
        /// Initializes static members of the <see cref="CSubStation"/> class.
        /// </summary>
        /// <autogeneratedoc />
        static CSubStation()
        {
            System = new CSubStation(CStation.System, 0, "System");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CSubStation"/> class.
        /// </summary>
        /// <autogeneratedoc />
        public CSubStation()
        {

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CSubStation" /> class.
        /// </summary>
        /// <param name="cStation">The station.</param>
        /// <param name="idSubstation">The identifier of the substation.</param>
        /// <param name="sDescription">The description.</param>
        public CSubStation(CStation cStation, long idSubstation, string sDescription)
        {
            Station = cStation;
            this.idSubStation = idSubstation;
            Description = sDescription;
            SubStations[idSubStation] = this;
        }

        /// <summary>
        /// Called when [change identifier sub station].
        /// </summary>
        /// <param name="oldId">The old identifier.</param>
        /// <param name="newId">The new identifier.</param>
        /// <param name="name">The name.</param>
        /// <autogeneratedoc />
        private void OnChangeIdSubStation(long oldId, long newId, string name)
        {
            if (oldId > 0)
                RemoveSubStation(oldId);
            if (newId > 0)
                SubStations[newId] = this;
        }

        /// <summary>
        /// Removes the sub station.
        /// </summary>
        /// <param name="oldId">The old identifier.</param>
        /// <exception cref="System.NotImplementedException"></exception>
        /// <autogeneratedoc />
        private static void RemoveSubStation(long oldId)
        {
            SubStations.Remove(oldId);
        }

        #region Interface methods
        /// <summary>
        /// Initializes a new instance of the <see cref="CSubStation"/> class.
        /// </summary>
        /// <param name="info">The information.</param>
        /// <param name="context">The context.</param>
        /// <autogeneratedoc />
        public CSubStation(SerializationInfo info, StreamingContext context):
            this(CStation.GetStation(info.GetInt64(nameof(idStation))), 
                info.GetInt64(nameof(idSubStation)),
                info.GetString(nameof(Description)))
        {
        }

        /// <summary>
        /// Gets the object data.
        /// </summary>
        /// <param name="info">The information.</param>
        /// <param name="context">The context.</param>
        /// <autogeneratedoc />
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue(nameof(idStation), idStation, typeof(long));           
            info.AddValue(nameof(idSubStation), idSubStation, typeof(long));
            info.AddValue(nameof(Description), Description, typeof(string));
        }

        /// <summary>
        /// Diese Methode ist reserviert und sollte nicht verwendet werden.
        /// Bei der Implementierung der <see langword="IXmlSerializable" />-Schnittstelle sollte von dieser Methode <see langword="null" /> (<see langword="Nothing" /> in Visual Basic) zurückgegeben werden. Wenn die Angabe eines benutzerdefinierten Schemas erforderlich ist, sollten Sie stattdessen das das <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> auf die Klasse anwenden.
        /// </summary>
        /// <returns>Ein <see cref="T:System.Xml.Schema.XmlSchema" /> zur Beschreibung der XML-Darstellung des Objekts, das von der <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />-Methode erstellt und von der <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />-Methode verwendet wird.</returns>
        /// <autogeneratedoc />
        public XmlSchema? GetSchema() => null;

        /// <summary>
        /// Generiert ein Objekt aus seiner XML-Darstellung.
        /// </summary>
        /// <param name="reader">Der <see cref="T:System.Xml.XmlReader" />-Stream, aus dem das Objekt deserialisiert wird.</param>
        /// <autogeneratedoc />
        public void ReadXml(XmlReader reader)
        {
            reader.MoveToAttribute(nameof(idSubStation));
            idSubStation = reader.ReadContentAsLong();

            reader.MoveToAttribute(nameof(Description));
            Description = reader.ReadContentAsString();

            reader.MoveToAttribute(nameof(idStation));
            var _idStation = reader.ReadContentAsLong();
            Station = CStation.GetStation(_idStation);
        }

        /// <summary>
        /// Konvertiert ein Objekt in seine XML-Darstellung.
        /// </summary>
        /// <param name="writer">Der <see cref="T:System.Xml.XmlWriter" />-Stream, in den das Objekt serialisiert wird.</param>
        /// <autogeneratedoc />
        public void WriteXml(XmlWriter writer)
        {
            writer.WriteStartAttribute(nameof(idSubStation));
            writer.WriteValue(idSubStation);
            writer.WriteEndAttribute();

            writer.WriteStartAttribute(nameof(Description));
            writer.WriteValue(Description);
            writer.WriteEndAttribute();

            writer.WriteStartAttribute(nameof(idStation));
            writer.WriteValue(idStation);
            writer.WriteEndAttribute();

        }
        #endregion
        #region static Methods
        /// <summary>
        /// Gets the sub station get station.
        /// </summary>
        /// <param name="idSubStation">The identifier sub station.</param>
        /// <returns>CSubStation.</returns>
        /// <autogeneratedoc />
        public static CSubStation GetSubStationGetStation(long idSubStation)
        {
            return SubStations.ContainsKey(idSubStation) ? SubStations[idSubStation] : null;
        }
        #endregion
        #endregion
    }
}
