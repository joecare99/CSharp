// ***********************************************************************
// Assembly         : TestStatements_net
// Author           : Mir
// Created          : 07-09-2022
//
// Last Modified By : Mir
// Last Modified On : 09-09-2022
// ***********************************************************************
// <copyright file="SwitchStatement3.cs" company="JC-Soft">
//     Copyright © JC-Soft 2023
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;

/// <summary>
/// The Anweisungen namespace.
/// </summary>
/// <autogeneratedoc />
namespace TestStatements.Anweisungen
{
    /// <summary>
    /// Class Vehicle.
    /// </summary>
    public abstract class Vehicle
    {
        internal decimal fee;

        /// <summary>
        /// Gets or sets the persons.
        /// </summary>
        /// <value>The persons.</value>
        public int Persons { get; set; }
        /// <summary>
        /// Gets or sets the capacity.
        /// </summary>
        /// <value>The capacity.</value>
        public int Capacity { get; set; }

        /// <summary>
        /// Finalizes an instance of the <see cref="Vehicle"/> class.
        /// </summary>
        /// <autogeneratedoc />
        public Vehicle() { Capacity = 1; }
    }

    /// <summary>
    /// Class Car.
    /// Implements the <see cref="TestStatements.Anweisungen.Vehicle" />
    /// </summary>
    /// <seealso cref="TestStatements.Anweisungen.Vehicle" />
    public class Car : Vehicle
    {
        public Car():this(0)
        {
            Persons = 1;
        }

        public Car(int passenger):base()
        {
            Capacity = 4;
            Persons = passenger+1;
        }

        /// <summary>
        /// Finalizes an instance of the <see cref="Car"/> class.
        /// </summary>
        /// <autogeneratedoc />
    }

    /// <summary>
    /// Class Bus.
    /// Implements the <see cref="TestStatements.Anweisungen.Vehicle" />
    /// </summary>
    /// <seealso cref="TestStatements.Anweisungen.Vehicle" />
    public class Bus : Vehicle
    {
        public Bus(int v=0):base() 
        {
            Persons = v + 1;
            base.Capacity = 52;
        }
    }

    /// <summary>
    /// Class Truck.
    /// Implements the <see cref="TestStatements.Anweisungen.Vehicle" />
    /// </summary>
    /// <seealso cref="TestStatements.Anweisungen.Vehicle" />
    public class Truck : Vehicle
    {
        public Truck(int v = 0):base()
        {
            base.Capacity = 2;
            Persons = v+1;
        }

    }

    /// <summary>
    /// Class Taxi.
    /// Implements the <see cref="TestStatements.Anweisungen.Car" />
    /// </summary>
    /// <seealso cref="TestStatements.Anweisungen.Car" />
    public class Taxi : Car
    {

        public Taxi(int passenger) : base(passenger)
        {
        }

    }

    /// <summary>
    /// Class TollCalculator.
    /// </summary>
    public class TollCalculator
    {
        /// <summary>
        /// Calculates the toll.
        /// </summary>
        /// <param name="vehicle">The vehicle.</param>
        /// <returns>System.Decimal.</returns>
        /// <exception cref="System.ArgumentException"></exception>
        /// <exception cref="System.ArgumentNullException">vehicle</exception>
        public decimal CalculateToll(object vehicle) =>
            vehicle switch
            {
                Taxi t => 3.50m,
                Car c => 2.00m,
                Bus b => 5.00m,
                Truck t => 10.00m,
                { } => throw new ArgumentException(message: "Not a known vehicle type", paramName: nameof(vehicle)),
                null => throw new ArgumentNullException(nameof(vehicle))
            };
    }

    /// <summary>
    /// Class SwitchStatement3.
    /// </summary>
    public class SwitchStatement3
    {
        public class Caprio : Car
        {
            public Caprio(int passenger = 0) : base(passenger) { Capacity = 2;/*; WeightClass = 1.2; Weight = 1.0;*/ }
        }

        public static void ShowTollCollector()
        {
            var tollCalc = new TollCalculator();

            var car = new Car();
            var taxi = new Taxi(1);
            var bus = new Bus();
            var car2 = new Caprio();
            var truck = new Truck();

            var cars = new object[] {
                new Car(),
                taxi,
                new Taxi(2),
                new Car(1),
                taxi,
                car,
                taxi,
                new Caprio(),
                new Bus(15),
                new Truck(1),
                taxi,
                new Car(2),
                car,
                new Truck(0),
                new Truck(1),
                taxi,
                new Taxi(1)
            };

            Console.WriteLine($"The toll for a car is {tollCalc.CalculateToll(car)}");
            Console.WriteLine($"The toll for a taxi is {tollCalc.CalculateToll(taxi)}");
            Console.WriteLine($"The toll for a bus is {tollCalc.CalculateToll(bus)}");
            Console.WriteLine($"The toll for a 2.Car is {tollCalc.CalculateToll(car2)}");
            Console.WriteLine($"The toll for a truck is {tollCalc.CalculateToll(truck)}");

            try
            {
                tollCalc.CalculateToll("this will fail"); }
            catch (ArgumentException)
            {
                Console.WriteLine("Caught an argument exception when using the wrong type");
            }
            try
            {
                tollCalc.CalculateToll(null!); }
            catch (ArgumentNullException)
            {
                Console.WriteLine("Caught an argument exception when using null");
            }

            var fee = 0m;
            var feeSum = 0m;
            var WeightSum = 0.0;
            var Persons = 0;
            foreach (var c in cars)
            {
                feeSum += fee = tollCalc.CalculateToll(c);
                if (c is Vehicle v)
                {
                   // WeightSum += v.Weight;
                    Persons += v.Persons;
                    v.fee += fee;
                    Console.Write($"{c.GetType().Name} \twith {v.Persons}P. and a weight of {v}t\tCost: {tollCalc.CalculateToll(c)}$");
                }
                Console.WriteLine($"\tTotals:  toll: {feeSum}$ \t Persons:{Persons}\t Weight:{WeightSum:0.00}t");

            }
        }
    }
}
