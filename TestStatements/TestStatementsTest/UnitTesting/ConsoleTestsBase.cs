using System;
using System.Diagnostics;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace TestStatements.UnitTesting {
    /// <summary>
    /// Class ConsoleTestsBase.
    /// </summary>
    public class ConsoleTestsBase
    {
        [DebuggerHidden]
        public static void AssertAreEqual(string sExp, string sAct, string Msg = "")
        {
            var sSep = new String[] { Environment.NewLine };
            AssertAreEqual(sExp.Split(sSep, StringSplitOptions.None), sAct.Split(sSep, StringSplitOptions.None), Msg);
            return;
        }

        /// <summary>
        /// Assert that both string-arrays are equal. (with diagnosis)
        /// </summary>
        /// <param name="exp">The exp.</param>
        /// <param name="act">The act.</param>
        /// <param name="Msg">The MSG.</param>
        /// <autogeneratedoc />
        [DebuggerHidden]
        public static void AssertAreEqual(string[] exp, string[] act, string Msg = "")
        {
            static string BldLns(int i, string[] aLines)
                => (i > 1 ? $"#{i - 2:D3}: {aLines[i - 2]}{Environment.NewLine}" : "") +
                   (i > 0 ? $"#{i - 1:D3}: {aLines[i - 1]}{Environment.NewLine}" : "") +
                   $"#{i:D3}> {aLines[i]}" +
                   (i < aLines.Length - 1 ? $"{Environment.NewLine}#{i + 1:D3}: {aLines[i + 1]}" : "") +
                   (i < aLines.Length - 2 ? $"{Environment.NewLine}#{i + 2:D3}: {aLines[i + 2]}" : "");
            if (exp != null && exp.Length / 2 < act?.Length)
                for (int i = 0; i < Math.Min(exp.Length, act.Length); i++)
                    if (exp[i] != act[i])
                        Assert.AreEqual(BldLns(i, exp), BldLns(i, act), $"{Msg}: Entry{i}:");
            Assert.AreEqual(exp?.Length, act?.Length);
        }

        protected static void AssertConsoleOutput(string Expected, Action ToTest)
        {
            using var sw = new StringWriter();
            Console.SetOut(sw);

            ToTest?.Invoke();

            var result = sw.ToString().Trim();
            AssertAreEqual(Expected, result);
        }

        protected static void AssertConsoleOutputArgs(string Expected, string[] Args, Action<String[]> ToTest)
        {
            using var sw = new StringWriter();
            Console.SetOut(sw);

            ToTest?.Invoke(Args);

            var result = sw.ToString().Trim();
            AssertAreEqual(Expected, result);
        }
        protected void AssertConsoleInOutputArgs(string Expected, string TestInput, string[] Args, Action<string[]> ToTest)
        {
            using var sw = new StringWriter();
            using var sr = new StringReader(TestInput);
            Console.SetOut(sw);
            Console.SetIn(sr);

            ToTest?.Invoke(Args);

            var result = sw.ToString().Trim();
            AssertAreEqual(Expected, result);
        }

    }
}
