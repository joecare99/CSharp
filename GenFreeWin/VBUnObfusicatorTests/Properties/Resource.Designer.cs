//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VBUnObfusicatorTests.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resource() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("VBUnObfusicatorTests.Properties.Resource", typeof(Resource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die private void Test10Dat()
        ///{
        ///    writeln((xText ? 1 : 0).AsString());
        ///}
        /// ähnelt.
        /// </summary>
        internal static string Test10Dat_cs {
            get {
                return ResourceManager.GetString("Test10Dat_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] Test10DataList {
            get {
                object obj = ResourceManager.GetObject("Test10DataList", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die     private void Test10Dat()
        ///    {
        ///        writeln((xText ? 1 : 0).AsString());
        ///    } ähnelt.
        /// </summary>
        internal static string Test10ExpCode {
            get {
                return ResourceManager.GetString("Test10ExpCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ///Declaration MainBlock 0,0
        ///private void Test10Dat()
        //////BlockStart Block 1,0
        ///{
        //////Instruction Instruction 1,1
        ///writeln((xText ? 1 : 0).AsString());
        //////BlockEnd Block 1,2
        ///} ähnelt.
        /// </summary>
        internal static string Test10ExpParse {
            get {
                return ResourceManager.GetString("Test10ExpParse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die T:Instruction,0,private void Test10Dat()
        ///T:Block,1,{
        ///T:Instruction,1,writeln((xText ? 1 : 0).AsString());
        ///T:Block,1,}
        /// ähnelt.
        /// </summary>
        internal static string Test10ExpTokenize {
            get {
                return ResourceManager.GetString("Test10ExpTokenize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die private void Test11Dat()
        ///{
        ///    switch (sTest)
        ///    {
        ///        case 0:
        ///        case &quot;1&quot;:
        ///        case (2, &quot;Test2&quot;):
        ///        case (3, &quot;Test3&quot;):
        ///        case &quot;4&quot; + cGed_Test4:
        ///        case &quot;5&quot; + cGed_Test5:
        ///        case &quot;6&quot; + cGed_Test6:
        ///        case &quot;7&quot; + cGed_Test7:
        ///            break;
        ///        default:
        ///            break;
        ///    }
        ///}
        /// ähnelt.
        /// </summary>
        internal static string Test11Dat_cs {
            get {
                return ResourceManager.GetString("Test11Dat_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] Test11DataList {
            get {
                object obj = ResourceManager.GetObject("Test11DataList", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die     private void Test11Dat()
        ///    {
        ///        switch (sTest)
        ///        {
        ///        case 0:
        ///        case &quot;1&quot;:
        ///        case (2, &quot;Test2&quot;):
        ///        case (3, &quot;Test3&quot;):
        ///        case &quot;4&quot; + cGed_Test4:
        ///        case &quot;5&quot; + cGed_Test5:
        ///        case &quot;6&quot; + cGed_Test6:
        ///        case &quot;7&quot; + cGed_Test7:
        ///            break;
        ///        default:
        ///            break;
        ///        }
        ///    } ähnelt.
        /// </summary>
        internal static string Test11ExpCode {
            get {
                return ResourceManager.GetString("Test11ExpCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ///Declaration MainBlock 0,0
        ///private void Test11Dat()
        //////BlockStart Block 1,0
        ///{
        //////Instruction Instruction 1,1
        ///switch (sTest)
        //////BlockStart Block 2,0
        ///{
        //////Label Label 2,1
        ///case 0:
        //////Instruction Label 2,2
        ///case &quot;1&quot;:
        //////Instruction Label 2,3
        ///case (2, &quot;Test2&quot;):
        //////Instruction Label 2,4
        ///case (3, &quot;Test3&quot;):
        //////Instruction Label 2,5
        ///case &quot;4&quot; + cGed_Test4:
        //////Instruction Label 2,6
        ///case &quot;5&quot; + cGed_Test5:
        //////Instruction Label 2,7
        ///case &quot;6&quot; + cGed_Test6:
        //////Instruction Label 2,8
        ///case &quot;7&quot; + cGed_Te [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test11ExpParse {
            get {
                return ResourceManager.GetString("Test11ExpParse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die T:Instruction,0,private void Test11Dat()
        ///T:Block,1,{
        ///T:Instruction,1,switch
        ///T:Instruction,1,(sTest)
        ///T:Block,2,{
        ///T:Label,2,case 0:
        ///T:Instruction,2,case
        ///T:String,2,&quot;1&quot;
        ///T:Label,2,:
        ///T:Instruction,2,case (2,
        ///T:String,2,&quot;Test2&quot;
        ///T:Label,2,):
        ///T:Instruction,2,case (3,
        ///T:String,2,&quot;Test3&quot;
        ///T:Label,2,):
        ///T:Instruction,2,case
        ///T:String,2,&quot;4&quot;
        ///T:Label,2,+ cGed_Test4:
        ///T:Instruction,2,case
        ///T:String,2,&quot;5&quot;
        ///T:Label,2,+ cGed_Test5:
        ///T:Instruction,2,case
        ///T:String,2,&quot;6&quot;
        ///T:Label,2,+ cGed_Test6:
        ///T:Instruction,2, [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test11ExpTokenize {
            get {
                return ResourceManager.GetString("Test11ExpTokenize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die private void Test12Dat()
        ///{
        ///    switch (sTest)
        ///    {
        ///        case 0:
        ///            goto IL_0001;
        ///        default:
        ///            break;
        ///        IL_0001:
        ///            v = 0;
        ///            goto IL_0002;
        ///        IL_0002:
        ///            K[v] = 0;
        ///            goto IL_0003;
        ///        IL_0003:
        ///            v++;
        ///            if (v &lt; 10)
        ///            {
        ///                goto IL_0002;
        ///            }
        ///            goto IL_0004;
        ///        IL_0004:
        ///            v = 0;
        ///            goto IL_0005;
        ///        IL_0005:
        ///          [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test12Dat_cs {
            get {
                return ResourceManager.GetString("Test12Dat_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] Test12DataList {
            get {
                object obj = ResourceManager.GetObject("Test12DataList", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die     private void Test12Dat()
        ///    {
        ///        switch (sTest)
        ///        {
        ///        case 0:
        ///            goto IL_0001;
        ///        default:
        ///            break;
        ///        IL_0001:
        ///            v = 0;
        ///            goto IL_0002;
        ///        IL_0002:
        ///            K[v] = 0;
        ///            goto IL_0003;
        ///        IL_0003:
        ///            v++;
        ///            if (v &lt; 10)
        ///            {
        ///                goto IL_0002;
        ///            }
        ///            goto IL_0004;
        ///        IL_0004:
        ///            v = 0;
        ///            goto IL_0005;
        ///        IL_ [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test12ExpCode {
            get {
                return ResourceManager.GetString("Test12ExpCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ///Declaration MainBlock 0,0
        ///private void Test12Dat()
        //////BlockStart Block 1,0
        ///{
        //////Instruction Instruction 1,1
        ///switch (sTest)
        //////BlockStart Block 2,0
        ///{
        //////Label Label 2,1
        ///case 0:
        //////Goto Goto 2,2 Dest:OK
        ///goto IL_0001;
        //////Label Label 2,3
        ///default:
        //////Instruction Instruction 2,4
        ///break;
        //////Label Label 2,5 1
        ///IL_0001:
        //////Instruction Instruction 2,6
        ///v = 0;
        //////Goto Goto 2,7 Dest:OK
        ///goto IL_0002;
        //////Label Label 2,8 2
        ///IL_0002:
        //////Instruction Instruction 2,9
        ///K[v] = 0;
        //////Goto Goto 2,10 Dest:O [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test12ExpParse {
            get {
                return ResourceManager.GetString("Test12ExpParse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  ähnelt.
        /// </summary>
        internal static string Test12ExpParseRL {
            get {
                return ResourceManager.GetString("Test12ExpParseRL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die T:Instruction,0,private void Test12Dat()
        ///T:Block,1,{
        ///T:Instruction,1,switch
        ///T:Instruction,1,(sTest)
        ///T:Block,2,{
        ///T:Label,2,case 0:
        ///T:Goto,2,goto IL_0001;
        ///T:Label,2,default:
        ///T:Instruction,2,break;
        ///T:Label,2,IL_0001:
        ///T:Instruction,2,v = 0;
        ///T:Goto,2,goto IL_0002;
        ///T:Label,2,IL_0002:
        ///T:Instruction,2,K[v] = 0;
        ///T:Goto,2,goto IL_0003;
        ///T:Label,2,IL_0003:
        ///T:Instruction,2,v++;
        ///T:Instruction,2,if
        ///T:Instruction,2,(v &lt; 10)
        ///T:Block,3,{
        ///T:Goto,3,goto IL_0002;
        ///T:Block,3,}
        ///T:Goto,2,goto IL_0004;
        ///T:Label [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test12ExpTokenize {
            get {
                return ResourceManager.GetString("Test12ExpTokenize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die     private void Befehl_Click(object eventSender, EventArgs eventArgs)
        ///    {
        ///        int try0000_dispatch = -1;
        ///        int num = default(int);
        ///        short index = default(short);
        ///        int num2 = default(int);
        ///        int num3 = default(int);
        ///        int number = default(int);
        ///        string prompt = default(string);
        ///        while (true)
        ///        {
        ///            try
        ///            {
        ///                /*Note: ILSpy has introduced the following switch to emulate a goto from catch-block to try-block* [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test1Dat_cs {
            get {
                return ResourceManager.GetString("Test1Dat_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] Test1DataList {
            get {
                object obj = ResourceManager.GetObject("Test1DataList", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die     private void Befehl_Click(object eventSender, EventArgs eventArgs)
        ///    {
        ///        int try0000_dispatch = -1;
        ///        int num = default(int);
        ///        short index = default(short);
        ///        int num2 = default(int);
        ///        int num3 = default(int);
        ///        int number = default(int);
        ///        string prompt = default(string);
        ///        while (true)
        ///        {
        ///            try
        ///            {
        ///                /*Note: ILSpy has introduced the following switch to emulate a goto from catch-block to try-block* [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test1ExpCode {
            get {
                return ResourceManager.GetString("Test1ExpCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ///Declaration MainBlock 0,0
        ///private void Befehl_Click(object eventSender, EventArgs eventArgs)
        //////BlockStart Block 1,0
        ///{
        //////Instruction Instruction 1,1
        ///int try0000_dispatch = -1;
        //////Instruction Instruction 1,2
        ///int num = default(int);
        //////Instruction Instruction 1,3
        ///short index = default(short);
        //////Instruction Instruction 1,4
        ///int num2 = default(int);
        //////Instruction Instruction 1,5
        ///int num3 = default(int);
        //////Instruction Instruction 1,6
        ///int number = default(int);
        //////Instruction Instruction 1,7 [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test1ExpParse {
            get {
                return ResourceManager.GetString("Test1ExpParse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ///Declaration MainBlock 0,0
        ///private void Befehl_Click(object eventSender, EventArgs eventArgs)
        //////BlockStart Block 1,0
        ///{
        //////Instruction Instruction 1,1
        ///int try0000_dispatch = -1;
        //////Instruction Instruction 1,2
        ///int num = default(int);
        //////Instruction Instruction 1,3
        ///short index = default(short);
        //////Instruction Instruction 1,4
        ///int num2 = default(int);
        //////Instruction Instruction 1,5
        ///int num3 = default(int);
        //////Instruction Instruction 1,6
        ///int number = default(int);
        //////Instruction Instruction 1,7 [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test1ExpParseRL {
            get {
                return ResourceManager.GetString("Test1ExpParseRL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ///Declaration MainBlock 0,0
        ///private void Befehl_Click(object eventSender, EventArgs eventArgs)
        //////BlockStart Block 1,0
        ///{
        //////Instruction Instruction 1,1
        ///int try0000_dispatch = -1;
        //////Instruction Instruction 1,2
        ///int num = default(int);
        //////Instruction Instruction 1,3
        ///short index = default(short);
        //////Instruction Instruction 1,4
        ///int num2 = default(int);
        //////Instruction Instruction 1,5
        ///int num3 = default(int);
        //////Instruction Instruction 1,6
        ///int number = default(int);
        //////Instruction Instruction 1,7 [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test1ExpParseSL {
            get {
                return ResourceManager.GetString("Test1ExpParseSL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die T:Instruction,0,private void Befehl_Click(object eventSender, EventArgs eventArgs)
        ///T:Block,1,{
        ///T:Instruction,1,int try0000_dispatch = -1;
        ///T:Instruction,1,int num = default(int);
        ///T:Instruction,1,short index = default(short);
        ///T:Instruction,1,int num2 = default(int);
        ///T:Instruction,1,int num3 = default(int);
        ///T:Instruction,1,int number = default(int);
        ///T:Instruction,1,string prompt = default(string);
        ///T:Instruction,1,while
        ///T:Instruction,1,(true)
        ///T:Block,2,{
        ///T:Instruction,2,try
        ///T:Block,3,{
        ///T:Instructi [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test1ExpTokenize {
            get {
                return ResourceManager.GetString("Test1ExpTokenize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die     private void Button2_Click(object sender, EventArgs e)
        ///    {
        ///        //Discarded unreachable code: IL_0085
        ///        int try0000_dispatch = -1;
        ///        int num3 = default(int);
        ///        int num2 = default(int);
        ///        int num = default(int);
        ///        byte b = default(byte);
        ///        while (true)
        ///        {
        ///            try
        ///            {
        ///                /*Note: ILSpy has introduced the following switch to emulate a goto from catch-block to try-block*/
        ///                ;
        ///                switch (try [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test2Dat_cs {
            get {
                return ResourceManager.GetString("Test2Dat_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] Test2DataList {
            get {
                object obj = ResourceManager.GetObject("Test2DataList", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die     private void Button2_Click(object sender, EventArgs e)
        ///    {
        ///        //Discarded unreachable code: IL_0085
        ///        int try0000_dispatch = -1;
        ///        int num3 = default(int);
        ///        int num2 = default(int);
        ///        int num = default(int);
        ///        byte b = default(byte);
        ///        while (true)
        ///        {
        ///            try
        ///            {
        ///                /*Note: ILSpy has introduced the following switch to emulate a goto from catch-block to try-block*/
        ///                ;
        ///                switch (try [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test2ExpCode {
            get {
                return ResourceManager.GetString("Test2ExpCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ///Declaration MainBlock 0,0
        ///private void Button2_Click(object sender, EventArgs e)
        //////BlockStart Block 1,0
        ///{
        //////Comment LComment 1,1
        /////Discarded unreachable code: IL_0085
        //////Instruction Instruction 1,2
        ///int try0000_dispatch = -1;
        //////Instruction Instruction 1,3
        ///int num3 = default(int);
        //////Instruction Instruction 1,4
        ///int num2 = default(int);
        //////Instruction Instruction 1,5
        ///int num = default(int);
        //////Instruction Instruction 1,6
        ///byte b = default(byte);
        //////Instruction Instruction 1,7
        ///while (true) [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test2ExpParse {
            get {
                return ResourceManager.GetString("Test2ExpParse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ///Declaration MainBlock 0,0
        ///private void Button2_Click(object sender, EventArgs e)
        //////BlockStart Block 1,0
        ///{
        //////Comment LComment 1,1
        /////Discarded unreachable code: IL_0085
        //////Instruction Instruction 1,2
        ///int try0000_dispatch = -1;
        //////Instruction Instruction 1,3
        ///int num3 = default(int);
        //////Instruction Instruction 1,4
        ///int num2 = default(int);
        //////Instruction Instruction 1,5
        ///int num = default(int);
        //////Instruction Instruction 1,6
        ///byte b = default(byte);
        //////Instruction Instruction 1,7
        ///while (true) [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test2ExpParseRL {
            get {
                return ResourceManager.GetString("Test2ExpParseRL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ///Declaration MainBlock 0,0
        ///private void Button2_Click(object sender, EventArgs e)
        //////BlockStart Block 1,0
        ///{
        //////Comment LComment 1,1
        /////Discarded unreachable code: IL_0085
        //////Instruction Instruction 1,2
        ///int try0000_dispatch = -1;
        //////Instruction Instruction 1,3
        ///int num3 = default(int);
        //////Instruction Instruction 1,4
        ///int num2 = default(int);
        //////Instruction Instruction 1,5
        ///int num = default(int);
        //////Instruction Instruction 1,6
        ///byte b = default(byte);
        //////Instruction Instruction 1,7
        ///while (true) [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test2ExpParseSL {
            get {
                return ResourceManager.GetString("Test2ExpParseSL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die T:Instruction,0,private void Button2_Click(object sender, EventArgs e)
        ///T:Block,1,{
        ///T:Instruction,1,
        ///T:LComment,1,//Discarded unreachable code: IL_0085
        ///T:Instruction,1,int try0000_dispatch = -1;
        ///T:Instruction,1,int num3 = default(int);
        ///T:Instruction,1,int num2 = default(int);
        ///T:Instruction,1,int num = default(int);
        ///T:Instruction,1,byte b = default(byte);
        ///T:Instruction,1,while
        ///T:Instruction,1,(true)
        ///T:Block,2,{
        ///T:Instruction,2,try
        ///T:Block,3,{
        ///T:Instruction,3,
        ///T:Comment,3,/*Note: ILSpy has intro [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test2ExpTokenize {
            get {
                return ResourceManager.GetString("Test2ExpTokenize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die public void Test8()
        ///{
        ///    if (true)
        ///        goto IL_109;
        ///    else
        ///        goto IL_1003;
        ///    IL_109:
        ///    num = 209;
        ///    i++;
        ///    goto IL_10002;
        ///IL_1003:
        ///    num = 210;
        ///    i--;
        ///    goto IL_10002;
        ///IL_10002:
        ///    num = 212;
        ///    goto IL_100001;
        ///IL_100001:
        ///    num = 213;
        ///    return;
        ///} ähnelt.
        /// </summary>
        internal static string Test8Dat_cs {
            get {
                return ResourceManager.GetString("Test8Dat_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] Test8DataList {
            get {
                object obj = ResourceManager.GetObject("Test8DataList", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die     public void Test8()
        ///    {
        ///        if (true)
        ///        goto IL_109;
        ///        else
        ///        goto IL_1003;
        ///    IL_109:
        ///        num = 209;
        ///        i++;
        ///        goto IL_10002;
        ///    IL_1003:
        ///        num = 210;
        ///        i--;
        ///        goto IL_10002;
        ///    IL_10002:
        ///        num = 212;
        ///        goto IL_100001;
        ///    IL_100001:
        ///        num = 213;
        ///        return;
        ///    } ähnelt.
        /// </summary>
        internal static string Test8ExpCode {
            get {
                return ResourceManager.GetString("Test8ExpCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ///Declaration MainBlock 0,0
        ///public void Test8()
        //////BlockStart Block 1,0
        ///{
        //////Instruction Instruction 1,1
        ///if (true)
        //////Goto Goto 1,2 Dest:OK
        ///goto IL_109;
        //////Instruction Instruction 1,3
        ///else
        //////Goto Goto 1,4 Dest:OK
        ///goto IL_1003;
        //////Label Label 1,5 1
        ///IL_109:
        //////Instruction Instruction 1,6
        ///num = 209;
        //////Instruction Instruction 1,7
        ///i++;
        //////Goto Goto 1,8 Dest:OK
        ///goto IL_10002;
        //////Label Label 1,9 1
        ///IL_1003:
        //////Instruction Instruction 1,10
        ///num = 210;
        //////Instruction Instruction 1,11
        ///i--;
        /// [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test8ExpParse {
            get {
                return ResourceManager.GetString("Test8ExpParse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die T:Instruction,0,public void Test8()
        ///T:Block,1,{
        ///T:Instruction,1,if
        ///T:Instruction,1,(true)
        ///T:Goto,1,goto IL_109;
        ///T:Instruction,1,else
        ///T:Goto,1,goto IL_1003;
        ///T:Label,1,IL_109:
        ///T:Instruction,1,num = 209;
        ///T:Instruction,1,i++;
        ///T:Goto,1,goto IL_10002;
        ///T:Label,1,IL_1003:
        ///T:Instruction,1,num = 210;
        ///T:Instruction,1,i--;
        ///T:Goto,1,goto IL_10002;
        ///T:Label,1,IL_10002:
        ///T:Instruction,1,num = 212;
        ///T:Goto,1,goto IL_100001;
        ///T:Label,1,IL_100001:
        ///T:Instruction,1,num = 213;
        ///T:Instruction,1,return;
        ///T:Block,1, [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test8ExpTokenize {
            get {
                return ResourceManager.GetString("Test8ExpTokenize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die   private void Command1_Click(object eventSender, EventArgs eventArgs)
        ///    {
        ///        //Discarded unreachable code: IL_451b
        ///        int try0001_dispatch = -1;
        ///        int num = default;
        ///        short index = default;
        ///        int num2 = default;
        ///        int num3 = default;
        ///        int lErl = default;
        ///        int num6 = default;
        ///        int num7 = default;
        ///        int num8 = default;
        ///        int num9 = default;
        ///        string sDest = default;
        ///        int num10 = default;
        ///        string sDest2 =  [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test9Dat_cs {
            get {
                return ResourceManager.GetString("Test9Dat_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] Test9DataList {
            get {
                object obj = ResourceManager.GetObject("Test9DataList", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die     private void Command1_Click(object eventSender, EventArgs eventArgs)
        ///    {
        ///        //Discarded unreachable code: IL_451b
        ///        int try0001_dispatch = -1;
        ///        int num = default;
        ///        short index = default;
        ///        int num2 = default;
        ///        int num3 = default;
        ///        int lErl = default;
        ///        int num6 = default;
        ///        int num7 = default;
        ///        int num8 = default;
        ///        int num9 = default;
        ///        string sDest = default;
        ///        int num10 = default;
        ///        string sDest2  [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test9ExpCode {
            get {
                return ResourceManager.GetString("Test9ExpCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ///Declaration MainBlock 0,0
        ///private void Command1_Click(object eventSender, EventArgs eventArgs)
        //////BlockStart Block 1,0
        ///{
        //////Comment LComment 1,1
        /////Discarded unreachable code: IL_451b
        //////Instruction Instruction 1,2
        ///int try0001_dispatch = -1;
        //////Instruction Instruction 1,3
        ///int num = default;
        //////Instruction Instruction 1,4
        ///short index = default;
        //////Instruction Instruction 1,5
        ///int num2 = default;
        //////Instruction Instruction 1,6
        ///int num3 = default;
        //////Instruction Instruction 1,7
        ///int lErl = def [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test9ExpParse {
            get {
                return ResourceManager.GetString("Test9ExpParse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ///Declaration MainBlock 0,0
        ///private void Command1_Click(object eventSender, EventArgs eventArgs)
        //////BlockStart Block 1,0
        ///{
        //////Comment LComment 1,1
        /////Discarded unreachable code: IL_451b
        //////Instruction Instruction 1,2
        ///int try0001_dispatch = -1;
        //////Instruction Instruction 1,3
        ///int num = default;
        //////Instruction Instruction 1,4
        ///short index = default;
        //////Instruction Instruction 1,5
        ///int num2 = default;
        //////Instruction Instruction 1,6
        ///int num3 = default;
        //////Instruction Instruction 1,7
        ///int lErl = def [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test9ExpParseRL {
            get {
                return ResourceManager.GetString("Test9ExpParseRL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ///Declaration MainBlock 0,0
        ///private void Command1_Click(object eventSender, EventArgs eventArgs)
        //////BlockStart Block 1,0
        ///{
        //////Comment LComment 1,1
        /////Discarded unreachable code: IL_451b
        //////Instruction Instruction 1,2
        ///int try0001_dispatch = -1;
        //////Instruction Instruction 1,3
        ///int num = default;
        //////Instruction Instruction 1,4
        ///short index = default;
        //////Instruction Instruction 1,5
        ///int num2 = default;
        //////Instruction Instruction 1,6
        ///int num3 = default;
        //////Instruction Instruction 1,7
        ///int lErl = def [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test9ExpParseSL {
            get {
                return ResourceManager.GetString("Test9ExpParseSL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die T:Instruction,0,private void Command1_Click(object eventSender, EventArgs eventArgs)
        ///T:Block,1,{
        ///T:Instruction,1,
        ///T:LComment,1,//Discarded unreachable code: IL_451b
        ///T:Instruction,1,int try0001_dispatch = -1;
        ///T:Instruction,1,int num = default;
        ///T:Instruction,1,short index = default;
        ///T:Instruction,1,int num2 = default;
        ///T:Instruction,1,int num3 = default;
        ///T:Instruction,1,int lErl = default;
        ///T:Instruction,1,int num6 = default;
        ///T:Instruction,1,int num7 = default;
        ///T:Instruction,1,int num8 = default;
        ///T [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Test9ExpTokenize {
            get {
                return ResourceManager.GetString("Test9ExpTokenize", resourceCulture);
            }
        }
    }
}
