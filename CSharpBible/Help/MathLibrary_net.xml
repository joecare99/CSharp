<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>MathLibrary_net</name>
  </assembly>
  <members>
    <member name="T:MathLibrary.TwoDim.AGVHandling">
      <summary>
   Class AGVHandling.
   </summary>
    </member>
    <member name="M:MathLibrary.TwoDim.AGVHandling.SinX_X(System.Double)">
      <summary>
   Stetic function of Sine(x)/x.
   </summary>
      <param name="x">The x value.</param>
      <returns>Value of the stetic function</returns>
    </member>
    <member name="M:MathLibrary.TwoDim.AGVHandling.AGVState(Math2d.Vector,System.Double,System.Double,Math2d.Vector@,System.Double@)">
      <summary>
   Computes the (new) position and angle (in AGV-coordinates) in the given time.
   </summary>
      <param name="velocity">The velocity of the AGV (in AGV-coordinates).</param>
      <param name="rotation">The rotation of the AGV [rad/s].</param>
      <param name="time">The time [s].</param>
      <param name="position">The new position (in AGV-coordinates).</param>
      <param name="angle">The new angle [rad] (in AGV-coordinates).</param>
    </member>
    <member name="M:MathLibrary.TwoDim.AGVHandling.AGVSteering(Math2d.Vector,System.Double,Math2d.Vector,Math2d.Vector@)">
      <summary>
   Agvs the steering.
   </summary>
      <param name="velocity">The velocity.</param>
      <param name="rotation">The rotation.</param>
      <param name="steerpos">The steerpos.</param>
      <param name="strvelocity">The strvelocity.</param>
    </member>
    <member name="T:MathLibrary.TwoDim.Math2d">
      <summary>
   Class Math2d.
   </summary>
    </member>
    <member name="T:MathLibrary.TwoDim.Math2d.Vector">
      <summary>
   Class Vector.
   </summary>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.Vector.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:MathLibrary.TwoDim.Math2d.Vector" /> class.
   </summary>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.Vector.#ctor(System.Double,System.Double)">
      <summary>
   Initializes a new instance of the <see cref="T:MathLibrary.TwoDim.Math2d.Vector" /> class.
   </summary>
      <param name="x">The x parameter.</param>
      <param name="y">The y parameter.</param>
    </member>
    <member name="P:MathLibrary.TwoDim.Math2d.Vector.x">
      <summary>
   Gets or sets the x.
   </summary>
      <value>The x.</value>
    </member>
    <member name="P:MathLibrary.TwoDim.Math2d.Vector.y">
      <summary>
   Gets or sets the y.
   </summary>
      <value>The y.</value>
    </member>
    <member name="P:MathLibrary.TwoDim.Math2d.Vector.AsComplex">
      <summary>
   Gets or sets the vector as a complex number.
   </summary>
      <value>As complex.</value>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.Vector.Length">
      <summary>
   Calculates the (carthesian) length of the vector.
   </summary>
      <returns>The (carthesian) length of the vector</returns>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.Vector.ToString">
      <summary>
   Converts the vector to a string.
   </summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.Vector.Equals(System.Object)">
      <summary>
   Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
   </summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.Vector.GetHashCode">
      <summary>
   Returns a hash code for this instance.
   </summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="P:MathLibrary.TwoDim.Math2d.Null">
      <summary>
   Gets the Vector with the  length of 0.
   </summary>
      <value>(0,0)</value>
    </member>
    <member name="P:MathLibrary.TwoDim.Math2d.eX">
      <summary>
   Gets the Vector with the  length of 1 in x-Direction.
   </summary>
      <value>(1,0)</value>
    </member>
    <member name="P:MathLibrary.TwoDim.Math2d.eY">
      <summary>
   Gets the Vector with the  length of 1 in y-Direction.
   </summary>
      <value>(0,1)</value>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.Add(Vector,Vector)">
      <summary>
   Adds the specified v1 to v2.
   </summary>
      <param name="v1">The v1.</param>
      <param name="v2">The v2.</param>
      <returns>(v1 + v2)</returns>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.Subtract(Vector,Vector)">
      <summary>
   Subtracts the specified v2 from v1 .
   </summary>
      <param name="v1">The v1.</param>
      <param name="v2">The v2.</param>
      <returns>the value of v1 - v2</returns>
    </member>
    <member name="F:MathLibrary.TwoDim.Math2d.pi">
      <summary>
   The constant value pi (3.1415...)
   </summary>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.TryLengthAngle(Vector,System.Double@,System.Double@)">
      <summary>
   Tries to compute the length and angle of the vector.
   </summary>
      <param name="vector">The vector.</param>
      <param name="length">The length of the vector.</param>
      <param name="angle">The angle of the vector [rad].</param>
      <returns>[True]: if the length and angle can be computed<br />[False]: otherwise<br /></returns>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.Rot90(Vector)">
      <summary>
   Rotates the specified vector v1 90° counter-clock-wise.
   </summary>
      <param name="v1">The vector.</param>
      <returns>(-v1.y,v1.x) the vector rotated 90° ccw.</returns>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.Negate(Vector)">
      <summary>
   Negates the v. Or rotates the specified vector v1 by 180°.
   </summary>
      <param name="v1">The vector.</param>
      <returns>(-v1.x,-v1.y) the negative vector or rotated by 180°.</returns>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.ByLengthAngle(System.Double,System.Double)">
      <summary>
   Gives the specified vector by length and angle
   </summary>
      <param name="length">The length of the vector.</param>
      <param name="angle">The angle of the vector[rad].</param>
      <returns>The specified vector.</returns>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.WinkelNorm(System.Double,System.Double)">
      <summary>
   "Normalizes" the &lt;angle&gt; around &lt;middle&gt;
   </summary>
      <param name="angle">The angle [rad].</param>
      <param name="middle">The middle value.</param>
      <returns>if no middle is given the result will be 0 &lt;= &lt;result&gt; &lt; 2 * pi<br /> otherwise the result will be <param name="middle">&lt;middle&gt;</param> - pi &lt;= &lt;result&gt; &lt; <param name="middle">&lt;middle&gt;</param> + pi<br /></returns>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.Mult(Vector,System.Double)">
      <summary>
   Multiplies the specified vector by the specified scalar.
   </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>The result vector</returns>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.Mult(Vector,Vector)">
      <summary>
   Multiplies the specified vectors fak1 and fak2.
   </summary>
      <param name="fak1">The vector fak1.</param>
      <param name="fak2">The vector fak2.</param>
      <returns>The vector-product</returns>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.CMult(Vector,Vector)">
      <summary>
   Multiplies the specified vectors, if they were complex numbers.
   </summary>
      <param name="fak1">The vector fak1.</param>
      <param name="fak2">The vector fak2.</param>
      <returns>The complex product as vector</returns>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.Div(Vector,System.Double)">
      <summary>
   Divides the specified vector by the scalar (divisor)
   </summary>
      <param name="vector">The vector.</param>
      <param name="scalar">The scalar.</param>
      <returns>The quotient as a vector</returns>
    </member>
    <member name="M:MathLibrary.TwoDim.Math2d.Rotate(Vector,System.Double)">
      <summary>
   Rotates the specified vector.
   </summary>
      <param name="vector">The vector.</param>
      <param name="angle">The angle [rad].</param>
      <returns>The rotated vector</returns>
    </member>
  </members>
</doc>