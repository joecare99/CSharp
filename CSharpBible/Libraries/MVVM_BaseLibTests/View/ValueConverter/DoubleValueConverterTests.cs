using Microsoft.VisualStudio.TestTools.UnitTesting;
using MVVM.View.ValueConverter;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace MVVM.View.ValueConverter.Tests
{
    [TestClass()]
    public class DoubleValueConverterTests
    {
        /// <summary>
        /// The converter
        /// </summary>
        /// <autogeneratedoc />
        DoubleValueConverter testConv;

        [TestInitialize]
        public void Init() {
            testConv = new();
        }

        /// <summary>
        /// Converts the correctly formats value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="expected">The expected.</param>
        /// <autogeneratedoc />
        [DataTestMethod]
        [DataRow(null,null, "")]
        [DataRow(true,null, "True")]
        [DataRow(1.0f, null, "1")]
        [DataRow(2.0f, "F2", "2.00")]
        [DataRow(3.0d, null, "3")]
        [DataRow(4.0d, "F2", "4.00")]
        public void ConvertTest(object? value,object? par, string expected)
        {
            var result = testConv.Convert(value, typeof(string), par, CultureInfo.InvariantCulture);
            Assert.AreEqual(expected, result);
        }
        
        /// <summary>
        /// Converts the correctly formats value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="expected">The expected.</param>
        /// <autogeneratedoc />
        [DataTestMethod]
        [DataRow(null,null, "")]
        [DataRow(true,null, "True")]
        [DataRow(1.0f, null, "2")]
        [DataRow(2.0f, "F2", "4.00")]
        [DataRow(3.0d, null, "6")]
        [DataRow(4.0d, "F2", "8.00")]
        public void ConvertTest2(object? value,object? par, string expected)
        {
            testConv.FixedFactor = 2.0d;
            var result = testConv.Convert(value, typeof(string), par, CultureInfo.InvariantCulture);
            Assert.AreEqual(expected, result);
        }

        [TestMethod()]
        [DataRow(null, double.NaN)]
        [DataRow("", double.NaN)]
        [DataRow("1", 1.0)]
        [DataRow("2.5", 2.5)]
        [DataRow("invalid", double.NaN)]
        [DataRow("3.14", 3.14)]
        public void ConvertBackTest(object? value, object? expected)
        {
            // Act
            var result = testConv.ConvertBack(value, typeof(double), null, CultureInfo.InvariantCulture);

            // Assert
            if (expected == null)
            {
                Assert.IsNull(result);
            }
            else
            {
                Assert.AreEqual(expected, result);
            }
        }
    }
}