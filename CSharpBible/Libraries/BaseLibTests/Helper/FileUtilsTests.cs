// ***********************************************************************
// Assembly         : BaseLibTests
// Author           : Mir
// Created          : 03-27-2023
//
// Last Modified By : Mir
// Last Modified On : 03-27-2023
// ***********************************************************************
// <copyright file="FileUtilsTests.cs" company="JC-Soft">
//     Copyright © JC-Soft 2023
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

/// <summary>
/// The Tests namespace.
/// </summary>
/// <autogeneratedoc />
namespace BaseLib.Helper.Tests
{
    /// <summary>
    /// Defines test class FileUtilsTests.
    /// </summary>
    /// <autogeneratedoc />
    [TestClass()]
    public class FileUtilsTests
    {
        /// <summary>
        /// The s user data
        /// </summary>
        /// <autogeneratedoc />
        internal string sUserData = "";
        /// <summary>
        /// The s local test path
        /// </summary>
        /// <autogeneratedoc />
        private string sLocalTestPath = "";
        /// <summary>
        /// The e exception
        /// </summary>
        /// <autogeneratedoc />
        private Exception? eException;


        /// <summary>
        /// Saves the test file.
        /// </summary>
        /// <param name="sFilename">The s filename.</param>
        /// <param name="aObj">The aObj.</param>
        /// <autogeneratedoc />
        private void SaveTestFile(string sFilename, object aObj)
        {
            using FileStream fs = File.OpenWrite(sFilename);
            using StreamWriter sw = new(fs);
            sw.Write($"This is File: {sFilename}\r\nUserdata is {(aObj as FileUtilsTests)?.sUserData}");
            if (eException != null) throw eException;
        }

        FileStream? fsopen = null;
        /// <summary>
        /// Saves the test file.
        /// How to do it not
        /// </summary>
        /// <param name="sFilename">The s filename.</param>
        /// <param name="aObj">The object.</param>
        /// <autogeneratedoc />
        private void SaveTestFile2(string sFilename, object aObj)
        {
            fsopen = File.OpenWrite(sFilename);
            using StreamWriter sw = new(fsopen, Encoding.UTF8, 1024, true);
            sw.Write($"This is File: {sFilename}\r\nUserdata is {(aObj as FileUtilsTests)?.sUserData}");
            throw new KeyNotFoundException("Don't ever do it this way !!!");

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileUtilsTests"/> class.
        /// </summary>
        /// <autogeneratedoc />
        public FileUtilsTests()
        {
        }

        /// <summary>
        /// Initializes this instance.
        /// </summary>
        /// <autogeneratedoc />
        [TestInitialize]
        public void Init()
        {
            sLocalTestPath = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());
            Directory.CreateDirectory(sLocalTestPath);
        }

        /// <summary>
        /// Cleanups this instance.
        /// </summary>
        /// <autogeneratedoc />
        [TestCleanup]
        public void Cleanup()
        {
            Directory.Delete(sLocalTestPath, true);
        }

        /// <summary>
        /// Changes the file ext test.
        /// </summary>
        /// <param name="sFilename">The s filename.</param>
        /// <param name="sNewExt">The s new ext.</param>
        /// <param name="sExpResult">The s exp result.</param>
        /// <autogeneratedoc />
        [TestMethod()]
        [DataRow("", "", ".")]
        [DataRow("test.org", ".new", "test.new")]
        [DataRow("test", ".new", "test.new")]
        [DataRow("c:\\test.org\\test", ".new", "c:\\test.org\\test.new")]
        [DataRow("c:test.org", ".new", "c:test.new")]
        [DataRow("c:test", ".new", "c:test.new")]
        [DataRow("c:\\test.dir\\..\\test.org", ".new", "c:\\test.dir\\..\\test.new")]
        public void ChangeFileExtTest(string sFilename, string sNewExt, string sExpResult)
        {
            Assert.AreEqual(sExpResult, FileUtils.ChangeFileExt(sFilename, sNewExt));

        }

        /// <summary>
        /// Saves the file test1.
        /// </summary>
        /// <param name="iPreMode">The i pre mode.</param>
        /// <param name="sFileName">Name of the s file.</param>
        /// <param name="_">if set to <c>true</c> [].</param>
        /// <autogeneratedoc />
        [TestMethod()]
        [DataRow(0, "TestFile.any", false)]
        [DataRow(0, "TestFile.~new", false)]
        [DataRow(0, "TestFile.bak", false)]
        [DataRow(1, "TestFile.any", false)]
        [DataRow(1, "TestFile.~new", false)]
        [DataRow(1, "TestFile.bak", false)]
        [DataRow(2, "TestFile.any", false)]
        [DataRow(2, "TestFile.~new", false)]
        [DataRow(2, "TestFile.bak", true)]
        [DataRow(4, "TestFile.any", false)]
        [DataRow(4, "TestFile.~new", false)]
        [DataRow(4, "TestFile.bak", false)]
        public void SaveFileTest1(int iPreMode, string sFileName, bool _)
        {
            bool[] ePreMode = new bool[3];
            ePreMode[0] = iPreMode % 2 != 0;
            iPreMode /= 2;
            ePreMode[1] = iPreMode % 2 != 0;
            iPreMode /= 2;
            ePreMode[2] = iPreMode % 2 != 0;

            PrepareFiles(ePreMode, Path.Combine(sLocalTestPath, sFileName));
            sUserData = "Test 123";
            Assert.IsTrue(FileUtils.SaveFile(SaveTestFile, Path.Combine(sLocalTestPath, sFileName), this));
            Assert.IsTrue(File.Exists(Path.Combine(sLocalTestPath, sFileName)));

        }

        /// <summary>
        /// Saves the file test2.
        /// </summary>
        /// <param name="iPreMode">The i pre mode.</param>
        /// <param name="sFileName">Name of the s file.</param>
        /// <param name="xExp">if set to <c>true</c> [x exp].</param>
        /// <autogeneratedoc />
        [TestMethod()]
        [DataRow(0, "TestFile.any", false)]
        [DataRow(0, "TestFile.~new", false)]
        [DataRow(0, "TestFile.bak", false)]
        [DataRow(1, "TestFile.any", false)]
        [DataRow(1, "TestFile.~new", false)]
        [DataRow(1, "TestFile.bak", false)]
        [DataRow(2, "TestFile.any", true)]
        [DataRow(2, "TestFile.~new", false)]
        [DataRow(2, "TestFile.bak", true)]
        [DataRow(4, "TestFile.any", false)]
        [DataRow(4, "TestFile.~new", false)]
        [DataRow(4, "TestFile.bak", false)]
        public void SaveFileTest2(int iPreMode, string sFileName, bool xExp)
        {
            bool[] ePreMode = new bool[3];
            ePreMode[0] = iPreMode % 2 != 0;
            iPreMode /= 2;
            ePreMode[1] = iPreMode % 2 != 0;
            iPreMode /= 2;
            ePreMode[2] = iPreMode % 2 != 0;

            PrepareFiles(ePreMode, Path.Combine(sLocalTestPath, sFileName));
            sUserData = "Test 123";
            eException = new FieldAccessException("Dummy Dummy");
            Assert.ThrowsExactly<FieldAccessException>(() => FileUtils.SaveFile(SaveTestFile, Path.Combine(sLocalTestPath, sFileName), this));
            Assert.AreEqual(xExp, File.Exists(Path.Combine(sLocalTestPath, sFileName)));
        }

        [TestMethod()]
        public void SaveFileTest3()
        {
            var sFileName = "test.nix";
            Assert.IsFalse(FileUtils.SaveFile((s, o) => { }, Path.Combine(sLocalTestPath, sFileName), this));
            Assert.IsFalse(File.Exists(Path.Combine(sLocalTestPath, sFileName)));
        }

        [TestMethod()]
        public void SaveFileTest4()
        {
            var sFileName = "test.nix";
            try
            {
                Assert.ThrowsExactly<KeyNotFoundException>(()=>FileUtils.SaveFile(SaveTestFile2, Path.Combine(sLocalTestPath, sFileName), this));
                Assert.IsFalse(File.Exists(Path.Combine(sLocalTestPath, sFileName)));
            }
            finally
            {
                fsopen?.Close();
                fsopen?.Dispose();
            }
        }

        /// <summary>
        /// Prepares the files.
        /// </summary>
        /// <param name="ePreMode">The e pre mode.</param>
        /// <param name="sFileName">Name of the s file.</param>
        /// <autogeneratedoc />
        private void PrepareFiles(bool[] ePreMode, string sFileName)
        {
            if (File.Exists(FileUtils.ChangeFileExt(sFileName, ".bak")))
                File.Delete(FileUtils.ChangeFileExt(sFileName, ".bak"));
            if (ePreMode[0])
            {
                sUserData = "Backupfile";
                SaveTestFile(FileUtils.ChangeFileExt(sFileName, ".bak"), this);
            }
            if (File.Exists(sFileName))
                File.Delete(sFileName);
            if (ePreMode[1])
            {
                sUserData = "Datafile";
                SaveTestFile(sFileName, this);
            }
            if (File.Exists(FileUtils.ChangeFileExt(sFileName, ".~new")))
                File.Delete(FileUtils.ChangeFileExt(sFileName, ".~new"));
            if (ePreMode[2])
            {
                sUserData = "NewFile";
                SaveTestFile(FileUtils.ChangeFileExt(sFileName, ".~new"), this);
            }
        }

        /// <summary>
        /// Writes the string to file test.
        /// </summary>
        /// <param name="sFilename">The s filename.</param>
        /// <param name="sData">The s data.</param>
        /// <autogeneratedoc />
        [TestMethod()]
        [DataRow("TestFile.dat", "")]
        [DataRow("TestFile2.dat", "12345678")]
        public void WriteStringToFileTest(string sFilename, string sData)
        {
            Assert.IsTrue(FileUtils.WriteStringToFile($"{sLocalTestPath}\\{sFilename}", sData));
            Assert.AreEqual(sData, File.ReadAllText(Path.Combine(sLocalTestPath, sFilename)));
        }

        /// <summary>
        /// Reads the string from file test.
        /// </summary>
        /// <param name="sFilename">The s filename.</param>
        /// <param name="sData">The s data.</param>
        /// <autogeneratedoc />
        [TestMethod()]
        [DataRow("", null)]
        [DataRow("TestFile.dat", "")]
        [DataRow("TestFile2.dat", "12345678")]
        public void ReadStringFromFileTest(string sFilename, string? sData)
        {
            if (!string.IsNullOrEmpty(sFilename))
                File.WriteAllText(Path.Combine(sLocalTestPath, sFilename), sData);
            Assert.AreEqual(sData, FileUtils.ReadStringFromFile(Path.Combine(sLocalTestPath, sFilename)));
        }
    }
}
