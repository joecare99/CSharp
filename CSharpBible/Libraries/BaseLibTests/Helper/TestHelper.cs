// ***********************************************************************
// Assembly         : BaseLibTests
// Author           : Mir
// Created          : 03-28-2023
//
// Last Modified By : Mir
// Last Modified On : 03-28-2023
// ***********************************************************************
// <copyright file="TestHelper.cs" company="JC-Soft">
//     Copyright © JC-Soft 2023
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Linq;

/// <summary>
/// The Helper namespace.
/// </summary>
/// <autogeneratedoc />
namespace BaseLib.Helper
{
    /// <summary>
    /// Class TestHelper.
    /// </summary>
    /// <autogeneratedoc />
    public static class TestHelper
    {
        /// <summary>
        /// Asserts that both classes are equal. 
        /// string -> use String-Array proc
        /// with normal class compare fields & properties
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="ExpData">The exp data.</param>
        /// <param name="ActData">The act data.</param>
        /// <param name="Excl">The excl.</param>
        /// <param name="Msg">The MSG.</param>
        /// <autogeneratedoc />
        public static void AssertAreEqual<T>(T ExpData, T ActData, string[]? Excl, string Msg = "") where T : class
        {
            var props = typeof(T).GetProperties();
            foreach (var prop in props)
                if (prop.CanRead && (Excl?.Contains(prop.Name) == false))
                {
                    Assert.AreEqual(ExpData.GetProp(prop.Name), ActData.GetProp(prop.Name), Msg + $".{prop.Name}");
                }
            var fields = typeof(T).GetFields();
            foreach (var field in fields)
                if (field.IsPublic && (Excl?.Contains(field.Name) == false))
                {
                    Assert.AreEqual(ExpData.GetField(field.Name), ActData.GetField(field.Name), Msg + $".{field.Name}");
                }
        }

        /// <summary>
        /// Assert that both string-arrays are equal. (with diagnosis)
        /// </summary>
        /// <param name="exp">The exp.</param>
        /// <param name="act">The act.</param>
        /// <param name="Msg">The MSG.</param>
        /// <autogeneratedoc />
        public static void AssertAreEqual(string[] exp, string[] act, string Msg = "")
        {
            static string BldLns(int i, string[] aLines)
                => (i > 1 ? $"#{i - 2:D3}: {aLines[i - 2]}{Environment.NewLine}" : "") +
                   (i > 0 ? $"#{i - 1:D3}: {aLines[i - 1]}{Environment.NewLine}" : "") +
                   $"#{i:D3}> {aLines[i]}" +
                   (i < aLines.Length - 1 ? $"{Environment.NewLine}#{i + 1:D3}: {aLines[i + 1]}" : "") +
                   (i < aLines.Length - 2 ? $"{Environment.NewLine}#{i + 2:D3}: {aLines[i + 2]}" : "");
            if (exp != null && exp.Length / 2 < act?.Length)
                for (int i = 0; i < Math.Min(exp.Length, act.Length); i++)
                    if (exp[i] != act[i])
                        Assert.AreEqual(BldLns(i, exp), BldLns(i, act), $"{Msg}: Entry{i}:");
            Assert.AreEqual(exp?.Length, act?.Length);

        }

        public static void AssertAreEqual(string sExp, string sAct, string Msg = "")
        {
            var sSep = new String[] { Environment.NewLine };
            AssertAreEqual(sExp.Split(sSep, StringSplitOptions.None), sAct.Split(sSep, StringSplitOptions.None), Msg);
            return;
        }

}
}
