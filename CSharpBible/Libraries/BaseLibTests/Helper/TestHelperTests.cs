// ***********************************************************************
// Assembly         : BaseLibTests
// Author           : Mir
// Created          : 03-28-2023
//
// Last Modified By : Mir
// Last Modified On : 03-28-2023
// ***********************************************************************
// <copyright file="TestHelper.cs" company="JC-Soft">
//     Copyright © JC-Soft 2023
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Linq;
using static BaseLib.Helper.TestHelper;

/// <summary>
/// The Helper namespace.
/// </summary>
/// <autogeneratedoc />
namespace BaseLib.Helper.Tests;

public class TestClass
{
    public string? Prop1 { get; set; }
    public string? Prop2 { get; set; }

    public string? Field1;
    public string? Field2;

    public TestClass(string[] asData)
    {
        Prop1 = asData[0];
        Prop2 = asData[1];
        Field1 = asData[2];
        Field2 = asData[3];
    }
}

/// <summary>
/// Class TestHelper.
/// </summary>
/// <autogeneratedoc />
[TestClass]
public class TestHelperTests
{
    [TestMethod]
    [DataRow(new string[] { "a", "b", "c", "d" }, new string[] { "a", "b", "c", "d" }, true)]
    [DataRow(new string[] { "a", "b", "c", "d" }, new string[] { "a", "b", "c", "e" })]
    [DataRow(new string[] { "a", "e", "c", "d" }, new string[] { "a", "b", "c", "d" })]
    public void AssertAreEqualClassTest1(string[] asExpData, string[] asActData, bool xExp = false)
    {
        var tcExp = new TestClass(asExpData);
        var tcAct = new TestClass(asActData);
        if (xExp)
            AssertAreEqual(tcExp, tcAct, Excl: Array.Empty<string>());
        else
            Assert.ThrowsExactly<AssertFailedException>(() => AssertAreEqual(tcExp, tcAct, Excl: Array.Empty<string>()));
    }

    [TestMethod]
    [DataRow(new string[] { "a", "b", "c", "d" }, new string[] { "a", "b", "c", "d" }, true)]
    [DataRow(new string[] {  }, new string[] { }, true)]
    [DataRow(new string[] { "a", "b", "c", "d" }, new string[] { "a", "b", "c", "e" })]
    [DataRow(new string[] { "a", "b", "c", "d" }, new string[] { "a", "x", "c", "d" })]
    [DataRow(new string[] { "a", "b", "c" }, new string[] { "a", "b", "c", "e" })]
    [DataRow(new string[] { "a", "b", "c", "d" }, new string[] { "a", "b", "c" })]
    [DataRow(new string[] {  }, new string[] { "a", "b", "c" })]
    [DataRow(new string[] { "a", "b", "c", "d" }, new string[] {  })]
    public void AssertAreEqualEnumTest1(string[] asExpData, string[] asActData, bool xExp = false)
    {
        if (xExp)
            AssertAreEqual(asExpData.ToList(), asActData.ToList());
        else
            Assert.ThrowsExactly<AssertFailedException>(() => AssertAreEqual(asExpData.ToList(), asActData.ToList()));
    }

    /// <summary>
    /// Assert that both string-arrays are equal. (with diagnosis)
    /// </summary>
    /// <param name="exp">The exp.</param>
    /// <param name="act">The act.</param>
    /// <param name="Msg">The MSG.</param>
    /// <autogeneratedoc />
    [TestMethod]
    [DataRow(new string[] { "a", "b", "c", "d" }, new string[] { "a", "b", "c", "d" }, true)]
    [DataRow(new string[] { "a", "b", "c", "d" }, new string[] { "a", "b", "c", "e" })]
    public void AssertAreEqualArrTest1(string[] asExpData, string[] asActData, bool xExp = false)
    {
        if (xExp)
            AssertAreEqual(asExpData, asActData);
        else
            Assert.ThrowsExactly<AssertFailedException>(() => AssertAreEqual(asExpData, asActData));
    }

    [TestMethod]
    [DataRow(new[] { 1, 2, 3, 4 }, new[] { 1, 2, 3, 4 }, true)]
    [DataRow(new[] { 1, 2, 3, 4 }, new[] { 1, 2, 3, 5 })]
    public void AssertAreEqualStrsTest1(int[] asExpData, int[] asActData, bool xExp = false)
    {
        if (xExp)
            AssertAreEqual(asExpData, asActData);
        else
            Assert.ThrowsExactly<AssertFailedException>(() => AssertAreEqual(asExpData, asActData));
    }


    public void AssertAreEqualStrTest(string sExp, string sAct, string Msg = "")
    {
        var sSep = new String[] { Environment.NewLine };
        AssertAreEqual(sExp.Split(sSep, StringSplitOptions.None), sAct.Split(sSep, StringSplitOptions.None), Msg);
        return;
    }
    /// <summary>
    /// Assert that both string-arrays are equal. (with diagnosis)
    /// </summary>
    /// <param name="exp">The exp.</param>
    /// <param name="act">The act.</param>
    /// <param name="Msg">The MSG.</param>
    /// <autogeneratedoc />
    [TestMethod]
    [DataRow(new[] { "a\r\nb\r\nc\r\nd\r\ne\r\nf" }, new[] { "a\r\nb\r\nc\r\nd\r\ne\r\nf" }, true)]
    [DataRow(new[] { "a\r\nb\r\nc\r\nd\r\ne\r\nf" }, new[] { "a\r\nb\r\nx\r\nd\r\ne\r\nf" })]
    public void AssertAreEqualStrTest1(string[] asExpData, string[] asActData, bool xExp = false)
    {
        if (xExp)
            AssertAreEqual(asExpData[0], asActData[0]);
        else
            Assert.ThrowsExactly<AssertFailedException>(() => AssertAreEqual(asExpData[0], asActData[0]));
    }

}
