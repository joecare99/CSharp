// ***********************************************************************
// Assembly         : MVVM_BaseLib
// Author           : Mir
// Created          : 05-20-2023
//
// Last Modified By : Mir
// Last Modified On : 09-26-2023
// ***********************************************************************
// <copyright file="IoC.cs" company="JC-Soft">
//     Copyright © JC-Soft 2023
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Windows.Markup;

/// <summary>
/// The Extension namespace.
/// </summary>
/// <autogeneratedoc />
namespace MVVM.View.Extension
{
    /// <summary>
    /// Class IoC.
    /// Implements the <see cref="MarkupExtension" />
    /// </summary>
    /// <seealso cref="MarkupExtension" />
    /// <autogeneratedoc />
    public class IoC : MarkupExtension , IIoC
    {
        /// <summary>Gets or sets the required service.</summary>
        /// <value>The fully initialized service.</value>
        /// <example>
        ///   <code>using Microsoft.Extensions.DependencyInjection
        /// // Build the DependencyInjection container
        /// var builder = new ServiceCollection();
        /// builder.AddTransient&lt;IInterface, CImplement1&gt;();
        /// builder.AddSingleton&lt;IInterface2, CSingleton&gt;();
        ///
        /// IoC.GetReqSrv = builder.BuildServiceProvider().GetRequiredService;</code>
        /// </example>
        public static Func<Type, object> GetReqSrv { get; set; }=(t)=>throw new NotImplementedException("Please initialize the service first.");
        /// <summary>
        /// Gets or sets the requested service (can be null).
        /// </summary>
        /// <value>The initialized service.</value>
        /// <example>
        ///   <code>using Microsoft.Extensions.DependencyInjection
        /// // Build the DependencyInjection container
        /// var builder = new ServiceCollection();
        /// builder.AddTransient&lt;IInterface, CImplement1&gt;();
        /// builder.AddSingleton&lt;IInterface2, CSingleton&gt;();
        ///
        /// IoC.GetSrv = builder.BuildServiceProvider().GetService;</code>
        /// </example>
        public static Func<Type, object?> GetSrv { get; set; } = (t) => null;
        public static Func<IServiceScope> GetScope { get; set; } = () => throw new NotImplementedException("Please initialize the service first.");

#pragma warning disable CS8618 // Ein Non-Nullable-Feld muss beim Beenden des Konstruktors einen Wert ungleich NULL enthalten. Erwägen Sie die Deklaration als Nullable.
        private static IServiceScope _Scope;
        private static IServiceScope _BaseScope;
#pragma warning restore CS8618 // Ein Non-Nullable-Feld muss beim Beenden des Konstruktors einen Wert ungleich NULL enthalten. Erwägen Sie die Deklaration als Nullable.

        public static IServiceScope Scope => _Scope;
        /// <summary>
        /// Gets the required service.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns>T, the initialized service(class)</returns>
        /// <autogeneratedoc />
        public static T GetRequiredService<T>() => (T)GetReqSrv.Invoke(typeof(T));
        /// <summary>
        /// Gets the service.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns>System.Nullable&lt;T&gt;, the initialized service(class)</returns>
        /// <autogeneratedoc />
        public static T? GetService<T>() => (T?)GetSrv.Invoke(typeof(T));
        /// <summary>
        /// Gets or sets the type.
        /// </summary>
        /// <value>The requested type</value>
        public Type Type { get; set; } = typeof(object);
        /// <summary>
        /// Gibt bei Implementierung in einer abgeleiteten Klasse ein Objekt zurück, das als Wert der Zieleigenschaft für diese Markuperweiterung bereitgestellt wird.
        /// </summary>
        /// <param name="serviceProvider">Ein Dienstanbieter-Hilfsprogramm, das Dienste für die Markuperweiterung bereitstellen kann.</param>
        /// <returns>Der Objektwert, der für die Eigenschaft festgelegt werden soll, auf die die Erweiterung angewendet wird.</returns>
        /// <autogeneratedoc />
        public override object? ProvideValue(IServiceProvider serviceProvider) => GetReqSrv.Invoke(Type);

        public static void Configure(IServiceProvider sp)
        {
            GetScope = sp.CreateScope;
            _Scope = _BaseScope = GetScope();
            GetReqSrv = (t) => { var s = sp.GetService(t); return s ?? throw new InvalidOperationException($"No service for {t}"); };
            GetSrv = sp.GetService;
        }

        public static IServiceScope GetNewScope(IServiceScope? aScope=null)
        {
            return _Scope = aScope ==null? GetScope(): aScope.ServiceProvider.CreateScope();
        }

        public static void SetCurrentScope(IServiceScope scope)
        {
            var sp = (_Scope = scope).ServiceProvider;
            GetReqSrv = (t) => { var s = sp.GetService(t); return s ?? throw new InvalidOperationException($"No service for {t}"); };
            GetSrv = sp.GetService;
        }
    }
}
