using Microsoft.VisualStudio.TestTools.UnitTesting;
using TestConsole;

namespace ConsoleDisplay.View.Tests
{
    internal enum VTiles {
        /// <summary>
        /// The zero
        /// </summary>
        zero = 0,
        /// <summary>
        /// The tile1
        /// </summary>
        tile1,
        /// <summary>
        /// The wall
        /// </summary>
        Wall,
        /// <summary>
        /// The dest
        /// </summary>
        Dest,
        /// <summary>
        /// The player
        /// </summary>
        Player,
        /// <summary>
        /// The boulder
        /// </summary>
        Boulder,
        /// <summary>
        /// The e1
        /// </summary>
        E1,
        /// <summary>
        /// The e2
        /// </summary>
        E2,
        /// <summary>
        /// The e3
        /// </summary>
        E3,
        /// <summary>
        /// The e4
        /// </summary>
        E4,
        /// <summary>
        /// The bounder moving
        /// </summary>
        BounderMoving,
        /// <summary>
        /// The player dead
        /// </summary>
        PlayerDead
    }

    internal class TestTileDef42 : TileDef<VTiles>
    {
        private static string[][] _vTileDefStr = new string[][]{
            new string[]{"    ", "    " },
            new string[]{"=-=-", "-=-=" },
            new string[]{ "─┴┬─", "─┬┴─"},
            new string[]{ " ╓╖ ", "▓░▒▓" },
            new string[]{ "⌐°@)", " ⌡⌡‼" },
            new string[]{ @"/¯¯\", @"\__/" },
            new string[]{ "]°°[", "_!!_" },
            new string[]{ "◄°@[",@"_!!\" },
            new string[]{ "]oo[", "_!!_" },
            new string[]{ "]@°►", "/!!_" },
            new string[]{ @"/╨╨\", @"\__/" },
            new string[]{ " +*∩", "╘═◊@" } };

        private static byte[][] _vTileColors = new byte[][]{
            new byte [] {0x00 },
            new byte [] {0x6E },
            new byte [] { 0x4F },
            new byte [] { 0x0E, 0x0E, 0x0E, 0x0E, 0x2A, 0x22, 0x02, 0x22 },
            new byte [] { 0x6F },
            new byte [] { 0x6E },
            new byte [] { 0x1A,0xA0,0xA0,0x1A,0x1A,0xA0,0xA0,0x1A },
            new byte [] { 0x1A,0xA0,0xA0,0x1A,0x1A,0xA0,0xA0,0x1A },
            new byte [] { 0x1A,0xA0,0xA0,0x1A,0x1A,0xA0,0xA0,0x1A },
            new byte [] { 0x1A,0xA0,0xA0,0x1A,0x1A,0xA0,0xA0,0x1A },
            new byte [] { 0x6E },
            new byte [] { 0x6F },
            new byte [] { 0x6E },
            new byte [] { 0x4F }
        };


        public override (string[] lines, (ConsoleColor fgr, ConsoleColor bgr)[] colors) GetTileDef(VTiles tile)
        {
            (string[] lines, (ConsoleColor fgr, ConsoleColor bgr)[] colors) result = default;
            result.lines = GetArrayElement(_vTileDefStr, tile);

            result.colors = new (ConsoleColor fgr, ConsoleColor bgr)[result.lines.Length * result.lines[0].Length];
            byte[] colDef = GetArrayElement(_vTileColors,tile);
            for (var i = 0; i < result.lines.Length * result.lines[0].Length; i++)
                result.colors[i] = ByteTo2ConsColor(colDef[i % colDef.Length]);
            return result;

        }

 
    }

    internal class TestTileDef21 : TileDef<VTiles>
    {
        private static string[][] _vTileDefStr = new string[][]{
            new string[]{ "  " },
            new string[]{ "=-" },
            new string[]{ "|_" },
            new string[]{ "╓╖" },
            new string[]{ "⌐@" },
            new string[]{ "[]" },
            new string[]{ "°°" },
            new string[]{ "◄°" },
            new string[]{ "oo" },
            new string[]{ "°►" },
            new string[]{ "╨╨" },
            new string[]{ "*∩" } };

        private static byte[][] _vTileColors = new byte[][]{
            new byte [] {0x00 },
            new byte [] {0x6E },
            new byte [] { 0x4F },
            new byte [] { 0x0E, 0x0E,  },
            new byte [] { 0x6F },
            new byte [] { 0x6E },
            new byte [] { 0xA0 },
            new byte [] { 0x1A, 0xA0 },
            new byte [] { 0xA0 },
            new byte [] { 0xA0,0x1A },
            new byte [] { 0x6E },
            new byte [] { 0x6F },
            new byte [] { 0x6E },
            new byte [] { 0x4F }
        };


        public override (string[] lines, (ConsoleColor fgr, ConsoleColor bgr)[] colors) GetTileDef(VTiles tile)
        {
            (string[] lines, (ConsoleColor fgr, ConsoleColor bgr)[] colors) result = default;
            result.lines = GetArrayElement(_vTileDefStr, tile);

            result.colors = new (ConsoleColor fgr, ConsoleColor bgr)[result.lines.Length * result.lines[0].Length];
            byte[] colDef = GetArrayElement(_vTileColors, tile);
            for (var i = 0; i < result.lines.Length * result.lines[0].Length; i++)
                result.colors[i] = ByteTo2ConsColor(colDef[i % colDef.Length]);
            return result;

        }

    }

    [TestClass()]
    public class TileDisplayTests
    {
        static TileDisplayTests()
        {
            TileDisplay<VTiles>.defaultTile = VTiles.zero;
            TileDisplay<VTiles>.tileDef = new TestTileDef42();
        }

        private static MyConsoleBase? console;
        private static TstConsole _tstCon;
        private readonly string cExpWriteTile=@"\c00    \x00\x00\x00\x00\x00\x00\x00\x00\c4F─┴┬─\c00\x00\x00\x00\x00\x00\x00\x00\x00\c6F⌐°@)\c00\x00\x00\x00\x00\x00\x00\x00\x00\c1A]\cA0°°\c1A[\c00
    \x00\x00\c6E=-=-\c00\x00\x00\c4F─┬┴─\c00\x00\x00\c0E ╓╖ \c00\x00\x00\c6F ⌡⌡‼\c00\x00\x00\c6E/¯¯\\\c00\x00\x00\c1A_\cA0!!\c1A_\c00\x00\x00\c1A◄\cA0°@\c1A[\c00
\c1A]\cA0oo\c1A[\c00\x00\x00\c6E-=-=\c00\x00\x00\c6E/╨╨\\\c00\x00\x00\c2A▓\c22░\c02▒\c22▓\c00\x00\x00\x00\x00\x00\x00\x00\x00\c6E\\__/\c00\x00\x00\x00\x00\x00\x00\x00\x00\c1A_\cA0!!\c1A\\\c00
\c1A_\cA0!!\c1A_\c00\x00\x00\c1A]\cA0@°\c1A►\c00\x00\x00\c6E\\__/\c00\x00\x00\c6F +*∩\c00
\x00\x00\x00\x00\x00\x00\c1A/\cA0!!\c1A_\c00\x00\x00\x00\x00\x00\x00\x00\x00\c6F╘═◊@\c00";
        private readonly string cTileDisplayTest1 = @"\c00

\x00\x00  \x00\x00\c6E=-=-\c00\x00\x00\c4F─┬\c00
\x00\x00\x00\x00\x00\x00\c6E-=-=\c00
\x00\x00\x00\x00\x00\x00\c6F⌐°@)\c00
\x00\x00\c0E╖ \c00\x00\x00\c6F ⌡⌡‼\c00\x00\x00\c6E/¯\c00
\x00\x00\c02▒\c22▓\c00\x00\x00\x00\x00\x00\x00\x00\x00\c6E\\_\c00
\x00\x00\cA0°\c1A[\c00\x00\x00\x00\x00\x00\x00\x00\x00\c1A]\cA0o\c00
\x00\x00\cA0!\c1A_\c00\x00\x00\c1A◄\cA0°@\c1A[\c00\x00\x00\c1A_\cA0!\c00
\x00\x00\x00\x00\x00\x00\c1A_\cA0!!\c1A\\\c00
\x00\x00\x00\x00\x00\x00\c6E/╨╨\\\c00
\x00\x00\cA0°\c1A►\c00\x00\x00\c6E\\__/\c00\x00\x00\c6F +\c00";
        private readonly string cTileDisplayTest12 = @"\c00

\x00\x00  \x00\x00\c6E=-=-\c00\x00\x00\c4F─┬\c00
\x00\x00\x00\x00\x00\x00\c6E-=-=\c00
\x00\x00\x00\x00\x00\x00\c6F⌐°@)\c00
\x00\x00\c0E╖ \c00\x00\x00\c6F ⌡⌡‼\c00\x00\x00\c6E/¯\c00
\x00\x00\c02▒\c22▓\c00\x00\x00\x00\x00\x00\x00\x00\x00\c6E\\_\c00
\x00\x00\cA0°\c1A[\c00\x00\x00\x00\x00\x00\x00\x00\x00\c1A]\cA0o\c00
\x00\x00\cA0!\c1A_\c00\x00\x00\c1A◄\cA0°@\c1A[\c00\x00\x00\c1A_\cA0!\c00
\x00\x00\x00\x00\x00\x00\c1A_\cA0!!\c1A\\\c00
\x00\x00\x00\x00\x00\x00\c6E/╨╨\\\c00
\x00\x00\cA0°\c1A►\c00\x00\x00\c6E\\__/\c00\x00\x00\c6F +\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00  \x00\x00\c6E=-=-\c00\x00\x00\c4F─┬\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c6E-=-=\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c6F⌐°@)\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c0E╖ \c00\x00\x00\c6F ⌡⌡‼\c00\x00\x00\c6E/¯\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c02▒\c22▓\c00\x00\x00\x00\x00\x00\x00\x00\x00\c6E\\_\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\cA0°\c1A[\c00\x00\x00\x00\x00\x00\x00\x00\x00\c1A]\cA0o\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\cA0!\c1A_\c00\x00\x00\c1A◄\cA0°@\c1A[\c00\x00\x00\c1A_\cA0!\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c1A_\cA0!!\c1A\\\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c6E/╨╨\\\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\cA0°\c1A►\c00\x00\x00\c6E\\__/\c00\x00\x00\c6F +\c00";
        private readonly string cTileDisplayTest2 = @"\c00

\x00\x00   \c6E=-=-\c4F─┬\c00
\x00\x00\x00\x00\x00\c6E-=-=\c00
\x00\x00\x00\x00\x00\c6F⌐°@)\c00
\x00\x00\c0E╓╖ \c6F ⌡⌡‼\c6E/¯\c00
\x00\x00\c2A░\c22▒\c02▓\c00\x00\x00\x00\x00\c6E\\_\c00
\x00\x00\cA0°°\c1A[\c00\x00\x00\x00\x00\c1A]\cA0o\c00
\x00\x00\c1A!\cA0!_\c1A◄\cA0°@\c1A[_!\c00
\x00\x00\x00\x00\x00\c1A_!\cA0!\\\c00
\x00\x00\x00\x00\x00\c6E/╨╨\\\c00
\x00\x00\cA0@°\c1A►\c6E\\__/\c6F +\c00";
        private readonly string cTileDisplayTest22 = @"\c00

\x00\x00   \c6E=-=-\c4F─┬\c00
\x00\x00\x00\x00\x00\c6E-=-=\c00
\x00\x00\x00\x00\x00\c6F⌐°@)\c00
\x00\x00\c0E╓╖ \c6F ⌡⌡‼\c6E/¯\c00
\x00\x00\c2A░\c22▒\c02▓\c00\x00\x00\x00\x00\c6E\\_\c00
\x00\x00\cA0°°\c1A[\c00\x00\x00\x00\x00\c1A]\cA0o\c00
\x00\x00\c1A!\cA0!_\c1A◄\cA0°@\c1A[_!\c00
\x00\x00\x00\x00\x00\c1A_!\cA0!\\\c00
\x00\x00\x00\x00\x00\c6E/╨╨\\\c00
\x00\x00\cA0@°\c1A►\c6E\\__/\c6F +\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00  \c6E=-=\c4F─\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c6E-=-=\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c6F⌐°@)\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c0E╓╖\c6F ⌡⌡\c6E/\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c0E░\c2A▒\c22▓\c00\x00\x00\c6E\\\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\cA0°°\c1A[\c00\x00\x00\c1A]\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c1A!!◄\cA0°@_\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\cA0_\c1A!!\cA0\\\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c6E/╨╨\\\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\cA0@°\c6E\\__\c6F \c00";
        private readonly string cTileDisplayTest23 = @"\c00

\x00\x00   \c6E=-=-\c4F─┬\c00
\x00\x00\x00\x00\x00\c6E-=-=\c00
\x00\x00\x00\x00\x00\c6F⌐°@)\c00
\x00\x00\c0E╓╖ \c6F ⌡⌡‼\c6E/¯\c00
\x00\x00\c2A░\c22▒\c02▓\c00\x00\x00\x00\x00\c6E\\_\c00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00  \x00\x00\c6E=-=-\c00\x00\x00\c4F─┬\c00
\x00\x00\cA0°°\c1A[\c00\x00\x00\x00\x00\c1A]\cA0o\c00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c6E-=-=\c00
\x00\x00\c1A!\cA0!_\c1A◄\cA0°@\c1A[_!\c00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\c6E=-\c00\x00\c4F|\c00\x00\x00\x00\x00\x00\x00\c6F⌐°@)\c00
\x00\x00\x00\x00\x00\c1A_!\cA0!\\\c00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c0E╖\c00\x00\c6F⌐@\c00\x00\c6E[\c00\x00\x00\c0E╖ \c00\x00\x00\c6F ⌡⌡‼\c00\x00\x00\c6E/¯\c00
\x00\x00\x00\x00\x00\c6E/╨╨\\\c00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\cA0°\c00\x00\x00\x00\x00\cA0o\c00\x00\x00\c02▒\c22▓\c00\x00\x00\x00\x00\x00\x00\x00\x00\c6E\\_\c00
\x00\x00\cA0@°\c1A►\c6E\\__/\c6F +\c00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c1A◄\cA0°\c00\x00\x00\x00\x00\cA0°\c1A[\c00\x00\x00\x00\x00\x00\x00\x00\x00\c1A]\cA0o\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c1A►\c00\x00\c6E╨╨\c00\x00\c6F*\c00\x00\x00\cA0!\c1A_\c00\x00\x00\c1A◄\cA0°@\c1A[\c00\x00\x00\c1A_\cA0!\c00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00  \c6E=-=\c4F─\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c1A_\cA0!!\c1A\\\c00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c6E-=-=\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c6E/╨╨\\\c00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c6F⌐°@)\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\cA0°\c1A►\c00\x00\x00\c6E\\__/\c00\x00\x00\c6F +\c00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c0E╓╖\c6F ⌡⌡\c6E/\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c0E░\c2A▒\c22▓\c00\x00\x00\c6E\\\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\cA0°°\c1A[\c00\x00\x00\c1A]\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c1A!!◄\cA0°@_\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\cA0_\c1A!!\cA0\\\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\c6E/╨╨\\\c00
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\cA0@°\c6E\\__\c6F \c00";

        [TestInitialize()]
        public void Init()
        {
            TileDisplay<VTiles>.myConsole = console ?? ( console= _tstCon = new TstConsole());
            Application.DoEvents();
            console.Clear();
        }

        [TestMethod()]
        public void TileDisplayTest()
        {
            var tileDisplay = new TileDisplay<VTiles>();
            TileDisplay<VTiles>.WriteTile(Point.Empty,PointF.Empty,VTiles.Wall);           
        }

        [TestMethod()]
        public void TileDisplayTest1()
        {
            var tileDisplay = new TileDisplay<VTiles>(new Point(2,2),new Size(3,5));
            foreach (VTiles tile in typeof(VTiles).GetEnumValues())
            {
                tileDisplay.WriteTile(new PointF((((int)tile) % 3) * 1.5f-0.5f, (((int)tile) % 2) * 0.5f + (((int)tile) / 3) * 1.5f-0.5f), tile);
                Thread.Sleep(0);
            }
            Application.DoEvents();
            Assert.AreEqual(cTileDisplayTest1, _tstCon.Content);

            tileDisplay = new TileDisplay<VTiles>(new Point(62, 12), new Size(3, 5));
            foreach (VTiles tile in typeof(VTiles).GetEnumValues())
            {
                tileDisplay.WriteTile(new PointF((((int)tile) % 3) * 1.5f - 0.5f, (((int)tile) % 2) * 0.5f + (((int)tile) / 3) * 1.5f - 0.5f), tile);
                Thread.Sleep(0);
            }
            Application.DoEvents();
            Assert.AreEqual(cTileDisplayTest12, _tstCon.Content);

            Thread.Sleep(500);
        }

        [TestMethod()]
        public void TileDisplayTest2()
        {
            var tileDisplay = new TileDisplay<VTiles>(new Point(2, 2), new Size(3, 5),new Size(3,2));
            foreach (VTiles tile in typeof(VTiles).GetEnumValues())
            {
                tileDisplay.WriteTile(new PointF((((int)tile) % 3) * 1.5f - 0.5f, (((int)tile) % 2) * 0.5f + (((int)tile) / 3) * 1.5f - 0.5f), tile);
                Thread.Sleep(0);
            }
            Application.DoEvents();
            Assert.AreEqual(cTileDisplayTest2, _tstCon.Content);

            tileDisplay = new TileDisplay<VTiles>(new Point(62, 12), new Size(3, 5),new Size(2, 2));
            foreach (VTiles tile in typeof(VTiles).GetEnumValues())
            {
                tileDisplay.WriteTile(new PointF((((int)tile) % 3) * 1.5f - 0.5f, (((int)tile) % 2) * 0.5f + (((int)tile) / 3) * 1.5f - 0.5f), tile);
                Thread.Sleep(0);
            }
            Application.DoEvents();
            Assert.AreEqual(cTileDisplayTest22, _tstCon.Content);

            tileDisplay = new TileDisplay<VTiles>(new Point(40, 6), new Size(3, 5), new Size(4, 2));
            var tileDisplay2 = new TileDisplay<VTiles>(new Point(32, 8), new Size(3, 5),new Size(2,1));
            tileDisplay2.TileDef = new TestTileDef21();
            foreach (VTiles tile in typeof(VTiles).GetEnumValues())
            {
                tileDisplay.WriteTile(new PointF((((int)tile) % 3) * 1.5f - 0.5f, (((int)tile) % 2) * 0.5f + (((int)tile) / 3) * 1.5f - 0.5f), tile);
                tileDisplay2.WriteTile(new PointF((((int)tile) % 3) * 1.5f - 0.5f, (((int)tile) % 2) * 0.5f + (((int)tile) / 3) * 1.5f - 0.5f), tile);
                Thread.Sleep(0);
            }
            Application.DoEvents();
            Assert.AreEqual(cTileDisplayTest23, _tstCon.Content);

            Thread.Sleep(500);
        }

        [TestMethod()]
        public void WriteTileTest()
        {
            foreach (VTiles tile in typeof(VTiles).GetEnumValues())
            {
                TileDisplay<VTiles>.WriteTile(Point.Empty, new PointF((((int)tile) % 8) * 1.5f, (((int)tile) % 2) * 0.5f + (((int)tile) / 8)), tile);
                Thread.Sleep(0);
            }
            Assert.AreEqual(cExpWriteTile, _tstCon.Content);
            Thread.Sleep(500);
        }
    }
}