// ***********************************************************************
// Assembly         : MVVM_ImageHandling
// Author           : Mir
// Created          : 05-19-2023
//
// Last Modified By : Mir
// Last Modified On : 05-19-2023
// ***********************************************************************
// <copyright file="ImageHandlingModel.cs" company="JC-Soft">
//     Copyright © JC-Soft 2023
// </copyright>
// <summary></summary>
// ***********************************************************************
using BaseLib.Models.Interfaces;
using CommunityToolkit.Mvvm.ComponentModel;
using System;

/// <summary>
/// The Models namespace.
/// </summary>
/// <autogeneratedoc />
namespace MVVM_ImageHandling.Models
{
    /// <summary>
    /// Class ImageHandlingModel.
    /// Implements the <see cref="ObservableObject" />
    /// Implements the <see cref="MVVM_ImageHandling.Models.IImageHandlingModel" />
    /// </summary>
    /// <seealso cref="ObservableObject" />
    /// <seealso cref="MVVM_ImageHandling.Models.IImageHandlingModel" />
    /// <autogeneratedoc />
    public partial class ImageHandlingModel :ObservableObject, IImageHandlingModel
    {
        #region Properties
        /// <summary>
        /// The timer
        /// </summary>
        /// <autogeneratedoc />
        private readonly ICyclTimer _timer;
        /// <summary>
        /// Gets or sets the get now.
        /// </summary>
        /// <value>The get now.</value>
        /// <autogeneratedoc />
        private readonly ISysTime _sysTime;
        /// <summary>
        /// Gets the now.
        /// </summary>
        /// <value>The now.</value>
        /// <autogeneratedoc />
        public DateTime Now { get => _sysTime.Now; }
        #endregion

        #region Methods
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageHandlingModel"/> class.
        /// </summary>
        /// <autogeneratedoc />
        public ImageHandlingModel(ICyclTimer timer,ISysTime sysTime)
        {
            _sysTime = sysTime;
            _timer = timer;
            _timer.Interval = 250d;
            _timer.Elapsed += (s, e) => OnPropertyChanged(nameof(Now));
            _timer.Start();
        }

#if !NET5_0_OR_GREATER
        /// <summary>
        /// Finalizes an instance of the <see cref="MainWindowViewModel" /> class.
        /// </summary>
        ~ImageHandlingModel()
        {
            _timer.Stop();
            return;
        }
#endif
        #endregion
    }
}
