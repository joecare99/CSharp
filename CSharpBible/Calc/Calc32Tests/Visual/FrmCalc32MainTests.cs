// ***********************************************************************
// Assembly         : Calc32Tests
// Author           : Mir
// Created          : 12-19-2021
//
// Last Modified By : Mir
// Last Modified On : 10-07-2022
// ***********************************************************************
// <copyright file="FrmCalc32MainTests.cs" company="JC-Soft">
//     Copyright © JC-Soft 2020
// </copyright>
// <summary></summary>
// ***********************************************************************
using Calc32.Models.Interfaces;
using Calc32.ViewModels.Interfaces;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NSubstitute;
using NSubstitute.ReceivedExtensions;
using System.ComponentModel;
using System.Threading;
using System.Windows.Forms;

/// <summary>
/// The Tests namespace.
/// </summary>
/// <autogeneratedoc />
namespace Calc32.Visual.Tests
{
    /// <summary>
    /// Defines test class FrmCalc32MainTests.
    /// </summary>
    [TestClass()]
    public class FrmCalc32MainTests
    {
        /// <summary>
        /// The test frame
        /// </summary>
#pragma warning disable CS8618 // Ein Non-Nullable-Feld muss beim Beenden des Konstruktors einen Wert ungleich NULL enthalten. Erwägen Sie die Deklaration als Nullable.
        private FrmCalc32Main testFrame;
        private ICalculatorViewModel _vm;
#pragma warning restore CS8618 // Ein Non-Nullable-Feld muss beim Beenden des Konstruktors einen Wert ungleich NULL enthalten. Erwägen Sie die Deklaration als Nullable.

        /// <summary>
        /// Initializes this instance.
        /// </summary>
        [TestInitialize]
        public void Init()
        {
            testFrame = new FrmCalc32Main(_vm=Substitute.For<ICalculatorViewModel>());
        }

        /// <summary>
        /// Defines the test method FrmCalc32MainTest.
        /// </summary>
        [TestMethod()]
        public void SetUpTest()
        {
            Assert.IsNotNull(testFrame);
            Assert.IsInstanceOfType(testFrame, typeof(FrmCalc32Main));
        }
        /// <summary>
        /// Defines the test method FrmCalc32MainTest.
        /// </summary>
        [TestMethod()]
        public void FrmCalc32MainTest()
        {
            testFrame.Show();
            Assert.AreEqual(true, testFrame.Visible);
            Application.DoEvents();
            Thread.Sleep(10);
            testFrame.Hide();
            Assert.AreEqual(false, testFrame.Visible);
        }

        [TestMethod()]
        public void calculatorClassChangeTest()
        {
            var i=( testFrame.DataContext.Accumulator+=1);
            _vm.PropertyChanged += Raise.Event<PropertyChangedEventHandler>(this,
                new PropertyChangedEventArgs(nameof(ICalculatorClass.Accumulator)));
            Assert.AreEqual(i.ToString(), testFrame.lblResult.Text);
        }

        [TestMethod()]
        public void btnNumber_ClickTest()
        {
            testFrame.Show();
            var i = testFrame.DataContext.Accumulator;
            testFrame.btnNum1.PerformClick();
            _vm.NumberCommand.ReceivedWithAnyArgs(1).Execute(null);
            testFrame.Hide();
        }

        [TestMethod()]
        public void btnOperator_ClickTest()
        {
            testFrame.Show();
            var i = testFrame.DataContext.Accumulator;
            testFrame.btnResult.PerformClick();
            _vm.OperationCommand.ReceivedWithAnyArgs(1).Execute(null);
            testFrame.Hide();
        }

        [TestMethod()]
        public void btnBack_ClickTest()
        {
            testFrame.Show();
            var i = testFrame.DataContext.Accumulator=123;
            testFrame.btnBack.PerformClick();
            _vm.BackSpaceCommand.ReceivedWithAnyArgs(1).Execute(null);
            testFrame.Hide();
        }



    }
}