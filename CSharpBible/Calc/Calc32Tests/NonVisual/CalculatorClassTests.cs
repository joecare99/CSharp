// ***********************************************************************
// Assembly         : Calc32Tests
// Author           : Mir
// Created          : 12-19-2021
//
// Last Modified By : Mir
// Last Modified On : 10-07-2022
// ***********************************************************************
// <copyright file="CalculatorClassTests.cs" company="JC-Soft">
//     Copyright © JC-Soft 2020
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Calc32.NonVisual;
using System;
using System.Runtime.CompilerServices;

/// <summary>
/// The Tests namespace.
/// </summary>
/// <autogeneratedoc />
namespace CSharpBible.Calc32.NonVisual.Tests
{
    /// <summary>
    /// Defines test class CalculatorClassTests.
    /// </summary>
    [TestClass()]
    public class CalculatorClassTests
    {
        /// <summary>
        /// The f calculator class
        /// </summary>
        private CalculatorClass FCalculatorClass;
        /// <summary>
        /// The n changes
        /// </summary>
        private int nChanges;

        public string DebugLog { get; private set; }

        /// <summary>
        /// Initializes this instance.
        /// </summary>
        [TestInitialize()]
        public void Init()
        {
            FCalculatorClass = new CalculatorClass();
            DebugLog = "";
        }

        /// <summary>
        /// Defines the test method TestSetup.
        /// </summary>
        [TestMethod()]
        public void TestSetup()
        {
            Assert.IsNotNull(FCalculatorClass);
            Assert.AreEqual(0,FCalculatorClass.Akkumulator);
            Assert.AreEqual(0, FCalculatorClass.Memory);
            Assert.AreEqual("", FCalculatorClass.OperationText);
            Assert.AreEqual("", DebugLog);
        }

        /// <summary>
        /// Defines the test method CalculatorClassTest.
        /// </summary>
        [TestMethod()]
        public void CalculatorClassTest()
        {
            Assert.IsInstanceOfType(FCalculatorClass,typeof(CalculatorClass));
        }

        /// <summary>
        /// Defines the test method AkkumulatorTest.
        /// </summary>
        [TestMethod()]
        public void AkkumulatorTest()
        {
            Assert.AreEqual(0, FCalculatorClass.Akkumulator);
            FCalculatorClass.Akkumulator = 1;
            Assert.AreEqual(1, FCalculatorClass.Akkumulator);
            FCalculatorClass.Akkumulator = int.MaxValue;
            Assert.AreEqual(int.MaxValue, FCalculatorClass.Akkumulator);
            FCalculatorClass.Akkumulator = int.MinValue;
            Assert.AreEqual(int.MinValue, FCalculatorClass.Akkumulator);
        }

        /// <summary>
        /// Calculates the change.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="EventArgs" /> instance containing the event data.</param>
        void CalcChange(object sender, (string, int, int) e)
        {
            DebugLog += $"{sender}.Change({e.Item1},{e.Item2}=>{e.Item3}){Environment.NewLine}";
            nChanges++;
        }

        /// <summary>
        /// Defines the test method OnChangeTest1.
        /// </summary>
        [TestMethod()]
        public void OnChangeTest1()
        {
            FCalculatorClass.OnChange += new EventHandler<(string,int,int)>(CalcChange);
            AkkumulatorTest();
            Assert.AreEqual(3, nChanges);
        }


    /// <summary>
    /// Defines the test method OnChangeTest2.
    /// </summary>
    [TestMethod()]
        public void OnChangeTest2()
        {
            FCalculatorClass.OnChange += new EventHandler<(string, int, int)>(CalcChange);
            FCalculatorClass.NumberButton(3);
            Assert.AreEqual(3, FCalculatorClass.Akkumulator);
            FCalculatorClass.NumberButton(2);
            Assert.AreEqual(32, FCalculatorClass.Akkumulator);
            FCalculatorClass.NumberButton(1);
            Assert.AreEqual(321, FCalculatorClass.Akkumulator);
            Assert.AreEqual(3, nChanges);
        }

        /// <summary>
        /// Defines the test method ButtonTest.
        /// </summary>
        [DataTestMethod()]
        [DataRow("432",new int[] { 4, 3, 2 },new int[] { 4,43,432})]
        [DataRow("1234", new int[] { 1,2,3,4 }, new int[] { 1, 12, 123,1234 })]
        [DataRow("1234", new int[] { 1, 2, 3, 4 }, new int[] { 1, 12, 123, 1234 })]
        [DataRow("999999999", new int[] { 9,9,9,9,9,9,9,9 }, new int[] { 9, 99, 999, 9999,99999,999999,9999999,99999999,999999999,999999999 })]
        public void ButtonTest(string name, int[] aiButtons, int[] aiExp )
        {
            for (int i = 0; i < aiButtons.Length; i++)
            {
                FCalculatorClass.NumberButton(aiButtons[i]);
                Assert.AreEqual(aiExp[i], FCalculatorClass.Akkumulator);
            }

        }

        /// <summary>
        /// Defines the test method ButtonBack.
        /// </summary>
        [TestMethod()]
        public void ButtonBack()
        {
            FCalculatorClass.OnChange += new EventHandler<(string, int, int)>(CalcChange);
            FCalculatorClass.NumberButton(4);
            Assert.AreEqual(4, FCalculatorClass.Akkumulator);
            FCalculatorClass.NumberButton(3);
            Assert.AreEqual(43, FCalculatorClass.Akkumulator);
            FCalculatorClass.NumberButton(2);
            Assert.AreEqual(432, FCalculatorClass.Akkumulator);
            FCalculatorClass.BackSpace();
            Assert.AreEqual(43, FCalculatorClass.Akkumulator);
            FCalculatorClass.BackSpace();
            Assert.AreEqual(4, FCalculatorClass.Akkumulator);
            FCalculatorClass.BackSpace();
            Assert.AreEqual(0, FCalculatorClass.Akkumulator);
        }

        /// <summary>
        /// Defines the test method ButtonTest.
        /// </summary>
        [DataTestMethod()]
        [DataRow("4+3", CalculatorClass.eOpMode.Plus, new int[] { 4, 3 }, 7 )]
        [DataRow("12-4", CalculatorClass.eOpMode.Minus, new int[] { 12, 4 }, 8)]
        [DataRow("7*6", CalculatorClass.eOpMode.Multiply, new int[] { 7, 6 }, 42)]
        [DataRow("99/11", CalculatorClass.eOpMode.Divide, new int[] { 99, 11 }, 9)]
        [DataRow("99 & 7", CalculatorClass.eOpMode.BinaryAnd, new int[] { 99, 7 }, 3)]
        [DataRow("12 | 7", CalculatorClass.eOpMode.BinaryOr, new int[] { 12, 7 }, 15)]
        [DataRow("12 x 7", CalculatorClass.eOpMode.BinaryXor, new int[] { 12, 7 }, 11)]
        [DataRow("12 ! 7", CalculatorClass.eOpMode.BinaryNot, new int[] { 12, -2 }, -2)]
        public void OperationTest(string name,CalculatorClass.eOpMode eO , int[] aiData,int iExp)
        {
            FCalculatorClass.Operation(0);
            FCalculatorClass.Akkumulator = aiData[0];
            FCalculatorClass.Operation((int)eO);
            FCalculatorClass.Akkumulator = aiData[1];
            FCalculatorClass.Operation(1);
            Assert.AreEqual(iExp, FCalculatorClass.Akkumulator);
            Assert.AreEqual("", DebugLog);
        }

    }
}