// ***********************************************************************
// Assembly         : Calc64BaseTests
// Author           : Mir
// Created          : 08-31-2022
//
// Last Modified By : Mir
// Last Modified On : 08-31-2022
// ***********************************************************************
// <copyright file="Calc64Tests.cs" company="JC-Soft">
//     Copyright © JC-Soft 2022
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Globalization;
using System.Linq;

/// <summary>
/// The Tests namespace.
/// </summary>
/// <autogeneratedoc />
namespace Calc64Base.Tests
{

    /// <summary>
    /// Defines test class Calc64Tests.
    /// </summary>
    /// <autogeneratedoc />
    [TestClass()]
    public class Calc64Tests
    {
        /// <summary>
        /// The test co
        /// </summary>
        /// <autogeneratedoc />
        private static TestCalcOp testCO;
        /// <summary>
        /// The test calc64
        /// </summary>
        /// <autogeneratedoc />
        private Calc64 testCalc64;
        private string DebugOut="";

        /// <summary>
        /// Initializes static members of the <see cref="Calc64Tests"/> class.
        /// </summary>
        /// <autogeneratedoc />
        static Calc64Tests(){

            testCO = new TestCalcOp();
            Calc64.RegisterOperation(testCO);
        }
        private void OnCalcOpChg(object? sender, (string prop, object? oldVal, object? newVal) e)
        {
            DoLog($"ChgCalcOp({sender},{e.prop},{e.oldVal} => {e.newVal})");
        }

        private void OnCalcOpErr(object? sender, Exception e)
        {
            DoLog($"Err({sender},{e.Message})");
        }

        private void DoLog(string v)
        {
            DebugOut += $"{v}{Environment.NewLine}";
        }

        /// <summary>
        /// Initializes this instance.
        /// </summary>
        /// <autogeneratedoc />
        [TestInitialize]
        public void Init()
        {
            testCalc64 = new Calc64();
            testCalc64.CalcOperationChanged += OnCalcOpChg;
            testCalc64.CalcOperationError += OnCalcOpErr;
            DebugOut = "";
            CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
            CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
        }

        /// <summary>
        /// Defines the test method RegisterOperationTest.
        /// </summary>
        /// <autogeneratedoc />
        [TestMethod()]
        public void RegisterOperationTest()
        {
            Assert.IsTrue(testCalc64.ShortDescriptions.Contains("?"));
            Assert.IsTrue(testCalc64.IDs.Contains(1));
            Assert.IsTrue(testCalc64.Operations.Contains(testCO));
            Assert.AreEqual(1, testCO.ID);

        }

        /// <summary>
        /// Defines the test method RegisterOperationTest.
        /// </summary>
        /// <autogeneratedoc />
        [TestMethod()]
        public void RegisterOperation2Test()
        {
            var testCO2 = new TestCalcOp();
            Calc64.RegisterOperation(testCO2);
            Assert.AreEqual(25, testCO2.ID);
        }

        /// <summary>
        /// Defines the test method RegisterOperationTest.
        /// </summary>
        /// <autogeneratedoc />
        [TestMethod()]
        public void NoPropChangeTest()
        {
            testCalc64.CalcOperationChanged-= OnCalcOpChg;
            testCalc64.Accumulator += 1;
            Assert.AreEqual("", DebugOut);
        }

        /// <summary>
        /// Does the opeation test.
        /// </summary>
        /// <param name="Name">The name.</param>
        /// <param name="iExpArgCount">The i exp argument count.</param>
        /// <param name="oInData">The o in data.</param>
        /// <param name="oOutData">The o out data.</param>
        /// <param name="xExpResult">if set to <c>true</c> [x exp result].</param>
        /// <autogeneratedoc />
        [DataTestMethod()]
        [DataRow("1", 3, new long[] { 1, 2, 3 }, new long[] { 4, 5, 6 }, true)]
        [DataRow("1-", 3, new long[] { 1, 2, 3 }, new long[] { 4, 5, 6 }, false)]
        [DataRow("2", 2, new long[] { 1, 2 }, new long[] { 5, 6 }, true)]
        [DataRow("2-", 2, new long[] { 1, 2 }, new long[] { 5, 6 }, false)]
        [DataRow("3", 1, new long[] { 1 }, new long[] { 5 }, true)]
        [DataRow("3-", 1, new long[] { 1 }, new long[] { 5 }, false)]
        public void DoOperationTest(string Name, int iExpArgCount, long[] oInData, long[] oOutData, bool xExpResult)
        {
            {
                var co = new TestCalcOp();
                co.SetNeedAccumulator=true;
                testCalc64.Accumulator = oInData[0];
                if (iExpArgCount > 1)
                {
                    co.SetNeedRegister = true;
                    testCalc64.Register = oInData[1];
                }
                if (iExpArgCount > 2) { 
                    co.SetNeedMemory=true;
                    testCalc64.Memory = oInData[2];
                }
                co.oExpData = new object[iExpArgCount];
                co.oSetData = new object[iExpArgCount];
                for (var i = 0; i < iExpArgCount; i++) {
                    co.oExpData[i]=oInData[i];
                    co.oSetData[i] = oOutData[i];
                }
                co.iExpLength = iExpArgCount;
                co.xSetResult = xExpResult;
                Assert.AreEqual(xExpResult, testCalc64.DoOperation(co));
                if (!xExpResult) oOutData = oInData;
                Assert.AreEqual((object)oOutData[0], testCalc64.Accumulator);
                if (iExpArgCount > 1)
                    Assert.AreEqual((object)oOutData[1], testCalc64.Register);
                else
                    Assert.AreEqual(0, testCalc64.Memory);
                if (iExpArgCount > 2)
                    Assert.AreEqual((object)oOutData[2], testCalc64.Memory);
                else
                    Assert.AreEqual(0, testCalc64.Memory);
            }
        }

        /// <summary>
        /// Does the opeation test1.
        /// </summary>
        /// <param name="Name">The name.</param>
        /// <param name="Op">The op.</param>
        /// <param name="iExpArgCount">The i exp argument count.</param>
        /// <param name="oInData">The o in data.</param>
        /// <param name="oOutData">The o out data.</param>
        /// <param name="xExpResult">if set to <c>true</c> [x exp result].</param>
        /// <autogeneratedoc />
        [DataTestMethod()]
        [DataRow("1", "?", 3, new long[] { 1, 2, 3 }, new long[] { 4, 5, 6 }, true)]
        [DataRow("1-", "?", 3, new long[] { 1, 2, 3 }, new long[] { 4, 5, 6 }, false)]
        [DataRow("2", "?", 2, new long[] { 1, 2 }, new long[] { 5, 6 }, true)]
        [DataRow("2-", "?", 2, new long[] { 1, 2 }, new long[] { 5, 6 }, false)]
        [DataRow("3", "?", 1, new long[] { 1 }, new long[] { 5 }, true)]
        [DataRow("3-", "?", 1, new long[] { 1 }, new long[] { 5 }, false)]
        [DataRow("4+", "+", 2, new long[] { 7, 1 }, new long[] { 8, 1 }, true)]
        [DataRow("5-", "-", 2, new long[] { -7, 1 }, new long[] { 8, 1 }, true)]
        [DataRow("6*", "*", 2, new long[] { 7, 3 }, new long[] { 21, 3 }, true)]
        [DataRow("7/", "/", 2, new long[] { -7, 21 }, new long[] { -3, 21 }, true)]
        [DataRow("8^", "^", 2, new long[] { 3, 7 }, new long[] { 343, 7 }, true)]
        public void DoOperationTest1(string Name, string Op, int iExpArgCount, long[] oInData, long[] oOutData, bool xExpResult)
        {
            var co = testCO;
            co.SetNeedAccumulator = true;
            testCalc64.Accumulator = oInData[0];
            if (co.SetNeedRegister = iExpArgCount > 1)
            {
                testCalc64.Register = oInData[1];
            }
            if (co.SetNeedMemory = iExpArgCount > 2)
            {
                testCalc64.Memory = oInData[2];
            }
            co.oExpData = new object[iExpArgCount];
            co.oSetData = new object[iExpArgCount];
            for (var i = 0; i < iExpArgCount; i++)
            {
                co.oExpData[i] = oInData[i];
                co.oSetData[i] = oOutData[i];
            }
            co.iExpLength = iExpArgCount;
            co.xSetResult = xExpResult;
            Assert.AreEqual(xExpResult, testCalc64.DoOperation(Op));
            Assert.AreEqual(null, testCalc64.LastError);
            if (!xExpResult) oOutData = oInData;
            Assert.AreEqual((object)oOutData[0], testCalc64.Accumulator);
            if (iExpArgCount > 1)
                Assert.AreEqual((object)oOutData[1], testCalc64.Register);
            else
                Assert.AreEqual(0, testCalc64.Memory);
            if (iExpArgCount > 2)
                Assert.AreEqual((object)oOutData[2], testCalc64.Memory);
            else
                Assert.AreEqual(0, testCalc64.Memory);
        }

        /// <summary>
        /// Does the opeation test1.
        /// </summary>
        /// <param name="Name">The name.</param>
        /// <param name="Op">The op.</param>
        /// <param name="iExpArgCount">The i exp argument count.</param>
        /// <param name="oInData">The o in data.</param>
        /// <param name="oOutData">The o out data.</param>
        /// <param name="xExpResult">if set to <c>true</c> [x exp result].</param>
        /// <autogeneratedoc />
        [DataTestMethod()]
        [DataRow("1", 1, 3, new long[] { 1, 2, 3 }, new long[] { 4, 5, 6 }, true)]
        [DataRow("1-", 1, 3, new long[] { 1, 2, 3 }, new long[] { 4, 5, 6 }, false)]
        [DataRow("2", 1, 2, new long[] { 1, 2 }, new long[] { 5, 6 }, true)]
        [DataRow("2-", 1, 2, new long[] { 1, 2 }, new long[] { 5, 6 }, false)]
        [DataRow("3", 1, 1, new long[] { 1 }, new long[] { 5 }, true)]
        [DataRow("3-", 1, 1, new long[] { 1 }, new long[] { 5 }, false)]
        [DataRow("4-2", 2, 2, new long[] { 7, 1 }, new long[] { 8, 1 }, true)]
        [DataRow("5-3", 3, 2, new long[] { -7, 1 }, new long[] { 8, 1 }, true)]
        [DataRow("6-4", 4, 2, new long[] { 7, 3 }, new long[] { 21, 3 }, true)]
        [DataRow("7-5", 5, 2, new long[] { -7, 21 }, new long[] { -3, 21 }, true)]
        [DataRow("8-10", 10, 2, new long[] { 3, 7 }, new long[] { 343, 7 }, true)]
        [DataRow("9-6", 6, 2, new long[] { 3, 14 }, new long[] { 2, 14 }, true)]
        [DataRow("10-7", 7, 2, new long[] { 3, 14 }, new long[] { 15, 14 }, true)]
        [DataRow("11-8", 8, 2, new long[] { 3, 14 }, new long[] { 13, 14 }, true)]
        [DataRow("12-13", 13, 2, new long[] { 3, 14 }, new long[] { 12, 14 }, true)]
        [DataRow("13-14", 14, 2, new long[] { 3, 14 }, new long[] { -2, 14 }, true)]
        [DataRow("14-15", 15, 2, new long[] { 3, 14 }, new long[] { -14, 14 }, true)]
        public void DoOperationTest2(string Name, int Op, int iExpArgCount, long[] oInData, long[] oOutData, bool xExpResult)
        {
            var co = testCO;
            co.SetNeedAccumulator = true;
            testCalc64.Accumulator = oInData[0];
            if (co.SetNeedRegister = iExpArgCount > 1)
            {
                testCalc64.Register = oInData[1];
            }
            if (co.SetNeedMemory = iExpArgCount > 2)
            {
                testCalc64.Memory = oInData[2];
            }
            co.oExpData = new object[iExpArgCount];
            co.oSetData = new object[iExpArgCount];
            for (var i = 0; i < iExpArgCount; i++)
            {
                co.oExpData[i] = oInData[i];
                co.oSetData[i] = oOutData[i];
            }
            co.iExpLength = iExpArgCount;
            co.xSetResult = xExpResult;
            Assert.AreEqual(xExpResult, testCalc64.DoOperation(Op));
            Assert.AreEqual(null, testCalc64.LastError);
            if (!xExpResult) oOutData = oInData;
            Assert.AreEqual((object)oOutData[0], testCalc64.Accumulator);
            if (iExpArgCount > 1)
                Assert.AreEqual((object)oOutData[1], testCalc64.Register);
            else
                Assert.AreEqual(0, testCalc64.Memory);
            if (iExpArgCount > 2)
                Assert.AreEqual((object)oOutData[2], testCalc64.Memory);
            else
                Assert.AreEqual(0, testCalc64.Memory);
        }

        [TestMethod]
        public void DoOperationNIOTest()
        {
            testCalc64.Register = 5L;
            testCalc64.Accumulator = 0L;
            DebugOut = "";
            testCalc64.DoOperation(5);
            Assert.AreEqual("Err(Calc64Base.Calc64,Attempted to divide by zero.)\r\n", DebugOut);
        }

        [TestMethod]
        public void DoOperationNIO2Test()
        {
            testCalc64.Register = 5L;
            testCalc64.Accumulator = 0L;
            testCalc64.CalcOperationError -= OnCalcOpErr;
            DebugOut = "";
            testCalc64.DoOperation(5);
            Assert.AreEqual("", DebugOut);
        }

        [TestMethod]
        public void DoOperationNIO3Test()
        {
            DebugOut = "";
            Assert.IsFalse(testCalc64.DoOperation((CalcOperation?)null));
            Assert.AreEqual("", DebugOut);
        }

        /// <summary>
        /// Determines whether [is register opeation test] [the specified name].
        /// </summary>
        /// <param name="Name">The name.</param>
        /// <param name="iOp">The i op.</param>
        /// <param name="sOp">The s op.</param>
        /// <param name="xExpResult">if set to <c>true</c> [x exp result].</param>
        /// <autogeneratedoc />
        [DataTestMethod()]
        [DataRow("1+", 1, "?", true)]
        [DataRow("1-", 1, "?", false)]
        [DataRow("0-", 0, "?", false)]
        public void IsRegisterOpeationTest(string Name, int iOp, string sOp, bool xExpResult)
        {
            testCO.SetNeedRegister = xExpResult;
            if (iOp==1)
            Assert.AreEqual(xExpResult, Calc64.IsRegisterOperation(testCO));
            else    
            Assert.AreEqual(xExpResult, Calc64.IsRegisterOperation((CalcOperation?)null));
        }

        /// <summary>
        /// Determines whether [is register opeation test1] [the specified name].
        /// </summary>
        /// <param name="Name">The name.</param>
        /// <param name="iOp">The i op.</param>
        /// <param name="sOp">The s op.</param>
        /// <param name="xExpResult">if set to <c>true</c> [x exp result].</param>
        /// <autogeneratedoc />
        [DataTestMethod()]
        [DataRow("1+", 1, "?", true)]
        [DataRow("1-", 1, "?", false)]
        [DataRow("2", 2, "+", true)]
        [DataRow("3", 3, "-", true)]
        [DataRow("4", 4, "*", true)]
        [DataRow("5", 5, "/", true)]
        [DataRow("6", 6, "&", true)]
        [DataRow("7", 7, "|", true)]
        [DataRow("8", 8, "x", true)]
        [DataRow("9", 9, "~", false)]
        [DataRow("10", 10, "^", true)]
        [DataRow("11", 11, "±", false)]
        [DataRow("12", 12, "%", true)]
        [DataRow("13", 13, "&~", true)]
        [DataRow("14", 14, "|~", true)]
        [DataRow("15", 15, "x~", true)]
        [DataRow("16", 16, "==", true)]
        public void IsRegisterOpeationTest1(string Name, int iOp, string sOp, bool xExpResult)
        {
            testCO.SetNeedRegister = xExpResult;
            Assert.AreEqual(xExpResult, Calc64.IsRegisterOperation(sOp));
        }

        /// <summary>
        /// Determines whether [is register opeation test2] [the specified name].
        /// </summary>
        /// <param name="Name">The name.</param>
        /// <param name="iOp">The i op.</param>
        /// <param name="sOp">The s op.</param>
        /// <param name="xExpResult">if set to <c>true</c> [x exp result].</param>
        /// <autogeneratedoc />
        [DataTestMethod()]
        [DataRow("1+", 1, "?", true)]
        [DataRow("1-", 1, "?", false)]
        [DataRow("2", 2, "+", true)]
        [DataRow("3", 3, "-", true)]
        [DataRow("4", 4, "*", true)]
        [DataRow("5", 5, "/", true)]
        [DataRow("6", 6, "&", true)]
        [DataRow("7", 7, "|", true)]
        [DataRow("8", 8, "x", true)]
        [DataRow("9", 9, "~", false)]
        [DataRow("10", 10, "^", true)]
        [DataRow("11", 11, "±", false)]
        [DataRow("12", 12, "%", true)]
        [DataRow("13", 13, "&~", true)]
        [DataRow("14", 14, "|~", true)]
        [DataRow("15", 15, "x~", true)]
        [DataRow("16", 16, "==", true)]
        public void IsRegisterOpeationTest2(string Name, int iOp, string sOp,bool xExpResult)
        {
            testCO.SetNeedRegister = xExpResult;
            Assert.AreEqual(xExpResult, Calc64.IsRegisterOperation(iOp));
        }

        /// <summary>
        /// Converts to calcoperationtest.
        /// </summary>
        /// <param name="Name">The name.</param>
        /// <param name="iOp">The i op.</param>
        /// <param name="sOp">The s op.</param>
        /// <autogeneratedoc />
        [DataTestMethod()]
        [DataRow("1", 1, "?")]
        [DataRow("2", 2, "+")]
        [DataRow("3", 3, "-")]
        [DataRow("4", 4, "*")]
        [DataRow("5", 5, "/")]
        [DataRow("6", 6, "&")]
        [DataRow("7", 7, "|")]
        [DataRow("8", 8, "x")]
        [DataRow("9", 9, "~")]
        [DataRow("10", 10, "^")]
        [DataRow("11", 11, "±")]
        [DataRow("12", 12, "%")]
        [DataRow("13", 13, "&~")]
        [DataRow("14", 14, "|~")]
        [DataRow("15", 15, "x~")]
        [DataRow("16", 16, "==")]
        [DataRow("16", 0, "")]
        [DataRow("16", 0, null)]
        public void ToCalcOperationTest(string Name, int iOp, string? sOp)
        {
            CalcOperation? co;
            if (iOp != 0)
            {
                Assert.IsNotNull(co = Calc64.ToCalcOperation(sOp));
                Assert.AreEqual(sOp, co.ShortDesc);
            }
            else
                Assert.IsNull(co = Calc64.ToCalcOperation(sOp));
            Assert.AreEqual(iOp, co?.ID ?? 0);
        }

        /// <summary>
        /// Converts to calcoperationtest1.
        /// </summary>
        /// <param name="Name">The name.</param>
        /// <param name="iOp">The i op.</param>
        /// <param name="sOp">The s op.</param>
        /// <autogeneratedoc />
        [DataTestMethod()]
        [DataRow("1", 1, "?")]
        [DataRow("2", 2, "+")]
        [DataRow("3", 3, "-")]
        [DataRow("4", 4, "*")]
        [DataRow("5", 5, "/")]
        [DataRow("6", 6, "&")]
        [DataRow("7", 7, "|")]
        [DataRow("8", 8, "x")]
        [DataRow("9", 9, "~")]
        [DataRow("10", 10, "^")]
        [DataRow("11", 11, "±")]
        [DataRow("12", 12, "%")]
        [DataRow("13", 13, "&~")]
        [DataRow("14", 14, "|~")]
        [DataRow("15", 15, "x~")]
        [DataRow("16", 16, "==")]
        public void ToCalcOperationTest1(string Name, int iOp, string sOp)
        {
            CalcOperation? co;
            Assert.IsNotNull(co=Calc64.ToCalcOperation(iOp));
            Assert.AreEqual(sOp, co.ShortDesc);
            Assert.AreEqual(iOp, co.ID);
        }
    }
}