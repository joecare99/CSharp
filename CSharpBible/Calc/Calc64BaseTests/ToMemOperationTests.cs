// ***********************************************************************
// Assembly         : Calc64BaseTests
// Author           : Mir
// Created          : 08-28-2022
//
// Last Modified By : Mir
// Last Modified On : 08-28-2022
// ***********************************************************************
// <copyright file="ToMemOperationTests.cs" company="JC-Soft">
//     Copyright © JC-Soft 2022
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;

/// <summary>
/// The Tests namespace.
/// </summary>
/// <autogeneratedoc />
namespace Calc64Base.Tests
{
    /// <summary>
    /// Defines test class ToMemOperationTests.
    /// </summary>
    /// <autogeneratedoc />
    [TestClass()]
    public class ToMemOperationTests
    {
        /// <summary>
        /// Defines the test method ToMemOperationTest.
        /// </summary>
        /// <autogeneratedoc />
        [TestMethod()]
        public void ToMemOperationTest()
        {
            var tmco = new ToMemOperation("?4", "Quest4", (a, m) => a ^ m);
            Assert.AreEqual("?4", tmco.ShortDesc);
            Assert.AreEqual("Quest4", tmco.LongDesc);
            Assert.AreEqual(true, tmco.NeedAccumulator);
            Assert.AreEqual(false, tmco.NeedRegister);
            Assert.AreEqual(true, tmco.NeedMemory);
        }
        static IEnumerable<object[]> ExecuteTestData => new[] {
        new object[]{"Nix", new object[] { }, false, false, 0L, 0L },
        new object[]{"01 - 15", new object[] { 15L }, false, false, 15L, 0L },
        new object[]{"02 - 15,2", new object[] { 15L, "2" }, false, false, 15L, 2u },
        new object[]{"03 - 15,3", new object[] { "15", 3L }, false, false, 15u, 3L },
        new object[]{"04 - 15,3", new object[] { 15L, 3L }, true, true, 15L, 3L },
        new object[]{"15 - 15,3", new object[] { 15L, 3L }, false, true, 15L, 11L },
        };
        /// <summary>
        /// Defines the test method ExecuteTest.
        /// </summary>
        /// <autogeneratedoc />
        [DataTestMethod()]
        [DynamicData(nameof(ExecuteTestData))]
        public void ExecuteTest(string name, object[] oArgs, bool xNoFkt,bool xRes,long lExp1,long lExp2)
        {
            var tmco = new ToMemOperation("?4n", "Quest4Null",null);
            if (!xNoFkt)
                tmco = new ToMemOperation("?4", "Quest4",(a, m) => (a ^ m) - 1);
            if (oArgs.Length > 0 && oArgs[0] is int i) oArgs[0] = (long)i;
            if (oArgs.Length > 1 && oArgs[1] is int i2) oArgs[1] = (long)i2;
            Assert.AreEqual(xRes, tmco.Execute(ref oArgs),name);
            if (oArgs.Length>0)
                Assert.AreEqual(lExp1, Convert.ToInt64(oArgs[0]) );
            if (oArgs.Length > 1)
                Assert.AreEqual(lExp2, Convert.ToInt64(oArgs[1]));
        }
    }
}