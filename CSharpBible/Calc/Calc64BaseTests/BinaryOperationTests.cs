// ***********************************************************************
// Assembly         : Calc64BaseTests
// Author           : Mir
// Created          : 08-28-2022
//
// Last Modified By : Mir
// Last Modified On : 08-28-2022
// ***********************************************************************
// <copyright file="BinaryOperationTests.cs" company="JC-Soft">
//     Copyright © JC-Soft 2022
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Calc64Base;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/// <summary>
/// The Tests namespace.
/// </summary>
/// <autogeneratedoc />
namespace Calc64Base.Tests
{
    /// <summary>
    /// Defines test class BinaryOperationTests.
    /// </summary>
    /// <autogeneratedoc />
    [TestClass()]
    public class BinaryOperationTests
    {
        static IEnumerable<object[]> ExecuteTestData => new[] {
        new object[]{"Nix", new object[] { }, false, false, 0L, 0L },
        new object[]{"01 - 15", new object[] { 15L }, false, false, 15L, 0L },
        new object[]{"02 - 15,2", new object[] { 15L, "2" }, false, false, 15L, 2u },
        new object[]{"03 - 15,3", new object[] { "15", 3L }, false, false, 15u, 3L },
        new object[]{"04 - 15,3", new object[] { 15L, 3L }, true, true, 15L, 3L },
        new object[]{"15 - 15,3", new object[] { 15L, 3L }, false, true, 12L, 3L },
        };

        /// <summary>
        /// Defines the test method BinaryOperationTest.
        /// </summary>
        /// <autogeneratedoc />
        [TestMethod()]
        public void BinaryOperationTest()
        {
            var bco = new BinaryOperation("?2", "Quest2", (a, r) => a ^ r);
            Assert.AreEqual("?2",bco.ShortDesc);
            Assert.AreEqual("Quest2", bco.LongDesc);
            Assert.AreEqual(true, bco.NeedAccumulator);
            Assert.AreEqual(true, bco.NeedRegister);
            Assert.AreEqual(false, bco.NeedMemory);
            Assert.IsNotNull(bco.Function);
        }

        /// <summary>
        /// Defines the test method ExecuteTest.
        /// </summary>
        /// <autogeneratedoc />
        [DataTestMethod()]
        [DynamicData(nameof(ExecuteTestData))]
        public void ExecuteTest(string name, object[] oArgs, bool xNoFkt, bool xRes, long lExp1, long lExp2)
        {
            var bco = new BinaryOperation("?", "Quest", null!);
            if (!xNoFkt)
                bco = new BinaryOperation("?", "Quest", (a, r) => a ^ r);
            if (oArgs.Length > 0 && oArgs[0] is int i) oArgs[0] = (long)i;
            if (oArgs.Length > 1 && oArgs[1] is int i2) oArgs[1] = (long)i2;
            Assert.AreEqual(xRes, bco.Execute(ref oArgs), name);
            if (oArgs.Length > 0)
                Assert.AreEqual(lExp1, Convert.ToInt64(oArgs[0]));
            if (oArgs.Length > 1)
                Assert.AreEqual(lExp2, Convert.ToInt64(oArgs[1]));
        }

    }
}