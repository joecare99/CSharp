// ***********************************************************************
// Assembly         : Calc64BaseTests
// Author           : Mir
// Created          : 08-27-2022
//
// Last Modified By : Mir
// Last Modified On : 08-28-2022
// ***********************************************************************
// <copyright file="UnaryOperationTests.cs" company="JC-Soft">
//     Copyright © JC-Soft 2022
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;

/// <summary>
/// The Tests namespace.
/// </summary>
/// <autogeneratedoc />
namespace Calc64Base.Tests
{

    /// <summary>
    /// Defines test class UnaryOperationTests.
    /// </summary>
    /// <autogeneratedoc />
    [TestClass()]
    public class UnaryOperationTests
    {
        /// <summary>
        /// Defines the test method UnaryOperationTest.
        /// </summary>
        /// <autogeneratedoc />
        [TestMethod()]
        public void UnaryOperationTest()
        {
            var uco= new UnaryOperation("?1", "Quest1", (a) => a * 2);
            Assert.AreEqual("?1", uco.ShortDesc);
            Assert.AreEqual("Quest1", uco.LongDesc);
            Assert.AreEqual(true, uco.NeedAccumulator);
            Assert.AreEqual(false, uco.NeedRegister);
            Assert.AreEqual(false, uco.NeedMemory);
            Assert.IsNotNull(uco.Function);
        }

        static IEnumerable<object[]> ExecuteTestData => new[] {
        new object[]{"Nix", new object[] { }, false, false, 0L, 0L },
        new object[]{"01 - 15", new object[] { 15L }, false, true, 30L, 0L },
   //     new object[]{"02 - 15,2", new object[] { 15L, "2" }, false, false, 15L, 2u },
        new object[]{"03 - 15", new object[] { "15" }, false, false, 15u, 3L },
        new object[]{"04 - 15", new object[] { 15L }, true, true, 15L, 3L },
        new object[]{"15 - 15", new object[] { 15L }, false, true, 30L, 11L },
        };
        /// <summary>
        /// Defines the test method ExecuteTest.
        /// </summary>
        /// <autogeneratedoc />
        [DataTestMethod()]
        [DynamicData(nameof(ExecuteTestData))]
        public void ExecuteTest(string name, object[] oArgs, bool xNoFkt, bool xRes, long lExp1, long _)
        {
            var tmco = new UnaryOperation("?1n", "Quest1Null", null);
            if (!xNoFkt)
                tmco = new UnaryOperation("?", "Quest", (a) => a  * 2);
            if (oArgs.Length > 0 && oArgs[0] is int i) oArgs[0] = (long)i;
//            if (oArgs.Length > 0 && oArgs[1] is int i) oArgs[1] = (long)i;
            Assert.AreEqual(xRes, tmco.Execute(ref oArgs), name);
            if (oArgs.Length > 0)
                Assert.AreEqual(lExp1, Convert.ToInt64(oArgs[0]));
 //           if (oArgs.Length > 1)
 //               Assert.AreEqual(lExp2, Convert.ToInt64(oArgs[1]));
        }

    }
}