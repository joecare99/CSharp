// ***********************************************************************
// Assembly         : Calc64BaseTests
// Author           : Mir
// Created          : 08-31-2022
//
// Last Modified By : Mir
// Last Modified On : 08-31-2022
// ***********************************************************************
// <copyright file="TestCalcOp.cs" company="JC-Soft">
//     Copyright © JC-Soft 2022
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.VisualStudio.TestTools.UnitTesting;

/// <summary>
/// The Tests namespace.
/// </summary>
/// <autogeneratedoc />
namespace Calc64Base.Tests
{
    /// <summary>
    /// Class TestCalcOp.
    /// Implements the <see cref="Calc64Base.CalcOperation" />
    /// </summary>
    /// <seealso cref="Calc64Base.CalcOperation" />
    /// <autogeneratedoc />
    public class TestCalcOp : CalcOperation
    {
        #region Properties
        /// <summary>
        /// Gets or sets the length of the i exp.
        /// </summary>
        /// <value>The length of the i exp.</value>
        /// <autogeneratedoc />
        public int iExpLength { get; set; }

        /// <summary>
        /// Gets or sets the o exp data.
        /// </summary>
        /// <value>The o exp data.</value>
        /// <autogeneratedoc />
        public object[]? oExpData { get; set; }
        /// <summary>
        /// Gets or sets the o set data.
        /// </summary>
        /// <value>The o set data.</value>
        /// <autogeneratedoc />
        public object[]? oSetData { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether [x set result].
        /// </summary>
        /// <value><c>true</c> if [x set result]; otherwise, <c>false</c>.</value>
        /// <autogeneratedoc />
        public bool xSetResult { get; set; }

        /// <summary>
        /// Sets a value indicating whether [set need accumulator].
        /// </summary>
        /// <value><c>true</c> if [set need accumulator]; otherwise, <c>false</c>.</value>
        /// <autogeneratedoc />
        public bool SetNeedAccumulator { set => NeedAccumulator = value; }
        /// <summary>
        /// Sets a value indicating whether [set need register].
        /// </summary>
        /// <value><c>true</c> if [set need register]; otherwise, <c>false</c>.</value>
        /// <autogeneratedoc />
        public bool SetNeedRegister { set => NeedRegister = value; }
        /// <summary>
        /// Sets a value indicating whether [set need memory].
        /// </summary>
        /// <value><c>true</c> if [set need memory]; otherwise, <c>false</c>.</value>
        /// <autogeneratedoc />
        public bool SetNeedMemory { set => NeedMemory = value; }
        #endregion

        #region Methods
        /// <summary>
        /// Initializes a new instance of the <see cref="TestCalcOp"/> class.
        /// </summary>
        /// <autogeneratedoc />
        public TestCalcOp() : base("?", "SomeQuest",1) { }
        /// <summary>
        /// Executes the specified o.
        /// </summary>
        /// <param name="o">The o.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        /// <autogeneratedoc />
        public override bool Execute(ref object[] o)
        {
            Assert.AreEqual(iExpLength, o.Length);
            for (var i=0; i< o.Length;i++)
                Assert.AreEqual(oExpData?[i], o[i]);
            for (var i = 0; i < o.Length; i++)
                o[i]= oSetData?[i] ?? 0L;
            return xSetResult;
        }
        #endregion
    }
}