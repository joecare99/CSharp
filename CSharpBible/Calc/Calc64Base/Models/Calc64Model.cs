// ***********************************************************************
// Assembly         : Calc64Base
// Author           : Mir
// Created          : 08-28-2022
//
// Last Modified By : Mir
// Last Modified On : 10-22-2022
// ***********************************************************************
// <copyright file="Calc64Model.cs" company="JC-Soft">
//     Copyright © JC-Soft 2022
// </copyright>
// <summary></summary>
// ***********************************************************************
using BaseLib.Helper;
using Calc64Base.Models.Interfaces;
using System;

/// <summary>
/// The Calc64Base namespace.
/// </summary>
/// <autogeneratedoc />
namespace Calc64Base.Models;

/// <summary>
/// Class Calc64Model.
/// Implements the <see cref="Calc64Base.Calc64" />
/// </summary>
/// <seealso cref="Calc64Base.Calc64" />
public partial class Calc64Model : Calc64, ICalculator
{
    /// <summary>
    /// Gets or sets the operation mode.
    /// </summary>
    /// <value>The operation mode.</value>
    public EOpMode OperationMode { get => _nMode; set => value.SetProperty(ref _nMode, PropChange); }

    /// <summary>
    /// The b edit mode
    /// </summary>
    private bool bEditMode;
    /// <summary>
    /// The n mode
    /// </summary>
    private EOpMode _nMode;

    /// <summary>
    /// Initializes a new instance of the <see cref="Calc64Model" /> class.
    /// </summary>
    public Calc64Model():base()
    {
        OperationMode = 0;
    }

    /// <summary>
    /// Gets the short description.
    /// </summary>
    /// <param name="e">The e.</param>
    /// <returns>System.String.</returns>
    /// <autogeneratedoc />
    public static string GetShortDesc(EOpMode e) => (e!=EOpMode.CalcResult)? Calc64.ToCalcOperation((int)e)?.ShortDesc ?? "":"=";
    /// <summary>
    /// Buttons the specified a number.
    /// </summary>
    /// <param name="aNumber">a number.</param>
    /// <param name="nBase">The n base.</param>
    public void Button(int aNumber,int nBase=10)
    {
        if (!bEditMode)
            (bEditMode, Accumulator) = (true, Math.Min(aNumber,nBase-1));
        else if (aNumber<nBase && Accumulator < Int64.MaxValue / nBase)
                Accumulator = Accumulator * nBase + aNumber;
        
    }

    /// <summary>
    /// Operations the specified v.
    /// </summary>
    /// <param name="v">The v.</param>
    public void Operation(int v)
    {
        if (v > 0)
        {
            bEditMode = false;
            if (OperationMode > EOpMode.CalcResult && ((EOpMode)v == EOpMode.CalcResult || IsRegisterOperation(v)))
                DoOperation((int)OperationMode);
            if ((EOpMode)v == EOpMode.CalcResult)
                (OperationMode, Register) = ((EOpMode)v, 0);
            else if (IsRegisterOperation(v))
                (OperationMode, Register) = ((EOpMode)v, Accumulator);
            else DoOperation(v);
        }
        if (v<0)
            switch(-v)
            {
                // clear editor
                case 1: Accumulator = 0; break;
                    // Clear all
                case 3: (Accumulator, Register, OperationMode) = (0, 0,EOpMode.NoMode); break;
                default:break;
            }
    }


    /// <summary>
    /// Backs the space.
    /// </summary>
    /// <param name="nBase">The n base.</param>
    public void BackSpace(int nBase=10)
    {
        if (!bEditMode)
            (bEditMode, Accumulator) = (true, 0);
        else Accumulator = /*floor*/ Accumulator / nBase;

    }
}
