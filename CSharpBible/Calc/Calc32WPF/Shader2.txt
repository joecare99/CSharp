void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from -1 to 1)
    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;
    
    float t = iTime + .5* sin(2.*iTime)- .01* cos(16.*iTime);
    
    // Renderer
    vec3 ro = vec3(0,2,-3);
    vec3 lookat = vec3(0);
    float zoom = 1.;
    
    vec2 uvmod = mod(uv,0.1) -vec2(0.05);
    
    
    // Renderer
    vec3 f= normalize(lookat-ro),
    	r=normalize(cross(vec3(0,1,0),f)),
        u=cross(f,r),
        c = ro + f * zoom,
    	i = c+ uv.x * r + uv.y * u,
        rd = normalize(i-ro);            
    
    float dS,d0;
    vec3 p;
    
    for(int i;i<100;i++){
    	p = ro+rd * d0;
        dS = length(vec2(length(p.xz)-1.,p.y)) - .5;
//        float ty = atan(length(p.xz),p.y);
//    	float tx = atan(p.x, p.z)+ty*5.+t;
//        dS= length(p *(.8+(0.1+0.1*sin(t*1.1))*smoothstep(-0.3,0.3,cos((ty) *2.)*cos(tx *2.))))-1.;
        if (dS<.001) break;
        d0 += dS;
    }
    mat2 uvx= mat2(uv.x,-uv.y,-uv.y,-uv.x)*3.;
    vec2 uvm = (uvx*uv)*3.;
      uvm = uvx*(uvm-vec2(1.,0));
      uvm = uvx*(uvm-vec2(1.,0));
/*   if (length(uvm)<3.)
   if (length(uvm)<3.)
      uvm = uvm*uvx-vec2(1.,0);
   if (length(uvm)<3.)
      uvm = uvm*uvx-vec2(1.,0);
   if (length(uvm)<3.)
      uvm = uvm*uvx-vec2(1.,0);
   if (length(uvm)<3.)
      uvm = uvm*uvx-vec2(1.,0);
   if (length(uvm)<3.)
      uvm = uvm*uvx-vec2(1.,0);
/*     if (length(uvm)<1.)
     uvm = vec2((uvm.x-.3) * (uvm.x-.3) - uvm.y*uvm.y, 2.* (uvm.x-.3) * uvm.y )*4.;
    if (length(uvm)<1.)
     uvm = vec2((uvm.x-.3) * (uvm.x-.3) - uvm.y*uvm.y, 2.* (uvm.x-.3) * uvm.y )*4.;
    if (length(uvm)<1.)
     uvm = vec2((uvm.x-.3) * (uvm.x-.3) - uvm.y*uvm.y, 2.* (uvm.x-.3) * uvm.y )*4.;
     uvm = mod(uvm,0.5) ; // */

//         uvm = vec2(uvm.x * uvm.x-uvm.y*uvm.y,2.* uvm.x * uvm.y )-uv;
//    vec2 uvm = uv+vec2(((.09-.1*cos(iTime*.2))/(0.5+length(uv ) *10.))*sin(iTime+5.*length(uv)));
    vec2 uvms = vec2(atan(uvm.x,uvm.y)-length(uvm)*sin(t*.0)*3.,(length(uvm))-t*.0);
    vec2 uvmod2 = mod(uvms,0.3) ;
    
    // Time varying pixel color
    vec3 col = 0.5 + 0.5*cos(t*1.+30.*(uvm.xyx+vec3(0,2,4)));
    
    if (false && (dS<.001)){
    	float tx = atan(p.x, p.z)+t;
        float ty = atan(length(p.xz)-1.,p.y);
//        float ty = atan(.5,p.y);
        col = vec3(sin(tx),sin(ty),cos(ty)); 
    }
  
   // col = vec3(iChannel0);
    // Output to screen
    fragColor = vec4(col,0.1);
}