void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;

    vec3 ro = vec3(0,2,-3);
    vec3 lookat = vec3(0);
    float zoom = 1.;
    
    // Renderer
    vec3 f= normalize(lookat-ro),
    	r=normalize(cross(vec3(0,1,0),f)),
        u=cross(f,r),
        c = ro + f * zoom,
    	i = c+ uv.x * r + uv.y * u,
        rd = normalize(i-ro);            
    
    float dS,d0;
    vec3 p;
    
    for(int i;i<100;i++){
    	p = ro+rd * d0;
//        dS = length(vec2(length(p.xz)-1.,p.y)) - .5;
    	float tx = atan(p.x, p.z)+iTime;
        float ty = atan(length(p.xz),p.y)+iTime*1.23;
        dS= length(p *(.9+.1*cos(tx *10.))*(.9+.1*cos(ty *10.)))-1.;
        if (dS<.001) break;
        d0 += dS;
    }
    
    
    // Time varying pixel color
    vec3 col = 0.1 + 0.1*cos(iTime+rd.xyx+vec3(0,2,4));

    if (dS<.001){
    	float tx = atan(p.x, p.z)+iTime;
//        float ty = atan(length(p.xz)-1.,p.y);
        float ty = atan(.5,p.y);
        col = vec3(sin(tx),sin(ty),cos(ty)); 
    }
  
   // col = vec3(iChannel0);
    // Output to screen
    fragColor = vec4(col,0.1);
}