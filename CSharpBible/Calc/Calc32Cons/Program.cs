// ***********************************************************************
// Assembly         : Calc32Cons
// Author           : Mir
// Created          : 12-23-2021
//
// Last Modified By : Mir
// Last Modified On : 10-22-2022
// ***********************************************************************
// <copyright file="Program.cs" company="JC-Soft">
//     Copyright © JC-Soft 2021
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Drawing;
using ConsoleLib;
using ConsoleLib.CommonControls;
using Calc32Cons.Visual;
using Microsoft.Extensions.DependencyInjection;
using Calc32.Models.Interfaces;
using Calc32.ViewModels;
using Calc32.Models;
using Calc32.ViewModels.Interfaces;
using ConsoleLib.Interfaces;
using BaseLib.Interfaces;
using CommunityToolkit.Mvvm.DependencyInjection;
using ConsoleLib.Interfaces;
using BaseLib.Models;

/// <summary>
/// The Calc32Cons namespace.
/// </summary>
/// <autogeneratedoc />
namespace Calc32Cons
{
    /// <summary>
    /// Class Program.
    /// </summary>
    internal class Program
    {
        /// <summary>
        /// The mouse
        /// </summary>
        //private static Pixel Mouse = new();
        /// <summary>
        /// The application
        /// </summary>
        private static Application? App;

        /// <summary>
        /// Initializes static members of the <see cref="Program" /> class.
        /// </summary>
        static Program() {
        }

        /// <summary>
        /// Defines the entry point of the application.
        /// </summary>
        /// <param name="args">The arguments.</param>
        static void Main(string[] _)
        {
            Init();

            App?.Run();

            Console.Write("Programm end ...");
            ConsoleFramework.ExtendedConsole?.Stop();
        }

        private static void Init()
        {
            var sp = new ServiceCollection()
             .AddSingleton<ICalculatorClass, CalculatorClass>()
             .AddTransient<ICalculatorViewModel, CalculatorViewModel>()
             .AddSingleton<IExtendedConsole,ExtendedConsole>()
             .AddSingleton(BuildApp)
             .AddSingleton<Application, Application>()
             .AddTransient<IConsole, ConsoleProxy>()
             .AddTransient<ConsoleCalcView, ConsoleCalcView>()
             //   .AddTransient<Views.LoadingDialog, Views.LoadingDialog>()
             .BuildServiceProvider();

            Ioc.Default.ConfigureServices(sp);

            var CalcView = Ioc.Default.GetRequiredService<ConsoleCalcView>();

            App.Visible = true;
            App.Draw();
            App.OnMouseMove += App_MouseMove;
            App.OnCanvasResize += App_CanvasResize;

        }

        private static IApplication BuildApp(IServiceProvider provider)
        {
            if (App != null) return App;
            var cl = ConsoleFramework.Canvas.ClipRect;
            cl.Inflate(-3, -3);
            Console.ForegroundColor = ConsoleColor.White;

            App = Ioc.Default.GetRequiredService<Application>();
            App.Visible = false;
            App.Border = ConsoleFramework.singleBorder;
            App.Dimension = cl;
            App.ForeColor = ConsoleColor.DarkBlue;
            App.BackColor = ConsoleColor.Black;
            App.BoarderColor = ConsoleColor.Blue;

            //Mouse.Set(0, 0, " ");
            //Mouse.BackColor = ConsoleColor.Red;
            //Mouse.Parent = App;
            //// t.Draw(10, 40, ConsoleColor.Gray);

            return App;
        }


        /// <summary>
        /// Applications the canvas resize.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The e.</param>
        private static void App_CanvasResize(object? sender, Point e)
        {
            var cl = ConsoleFramework.Canvas.ClipRect;
            cl.Inflate(-3, -3);
            if (App != null)
                App.Dimension = cl;
        }

        /// <summary>
        /// Handles the MouseMove event of the App control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="MouseEventArgs" /> instance containing the event data.</param>
        private static void App_MouseMove(object? sender, IMouseEvent e)
        {
   //         Mouse.Set(Point.Subtract(e.MousePos, (Size?)Mouse.Parent?.Position??Size.Empty));
        }

    }
}

