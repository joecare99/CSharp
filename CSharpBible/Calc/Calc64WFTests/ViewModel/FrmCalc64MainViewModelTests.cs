using Microsoft.VisualStudio.TestTools.UnitTesting;
using Calc64WF.ViewModel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel;

namespace Calc64WF.ViewModel.Tests
{
    [TestClass()]
    public class FrmCalc64MainViewModelTests
    {
        /// <summary>
        /// The property changed count
        /// </summary>
        /// <autogeneratedoc />
        private int _PropChangedCount;
        /// <summary>
        /// The property changed
        /// </summary>
        /// <autogeneratedoc />
        private string _PropChanged = "";
        /// <summary>
        /// The model view
        /// </summary>
        /// <autogeneratedoc />
        private FrmCalc64MainViewModel _ModelView;

        /// <summary>
        /// Tests the initialize.
        /// </summary>
        /// <autogeneratedoc />
        [TestInitialize]
        public void TestInitialize()
        {
            ClearResults();
            _ModelView = new FrmCalc64MainViewModel();
            _ModelView.PropertyChanged += MainWindow_VM_PropChanged;
        }

        private void MainWindow_VM_PropChanged(object sender, PropertyChangedEventArgs e)
        {
            _PropChangedCount++;
            _PropChanged += $"{e.PropertyName}:{sender.GetType().GetProperty(e.PropertyName)?.GetValue(sender)}\r\n";
        }

        private void ClearResults()
        {
            _PropChangedCount = 0;
            _PropChanged = "";
        }

        [TestMethod()]
        public void SetupTest()
        {
            Assert.IsNotNull(_ModelView);
            Assert.IsInstanceOfType(_ModelView, typeof(FrmCalc64MainViewModel));
        }

        /// <summary>
        /// Mains the window vm number button.
        /// </summary>
        /// <param name="sButtons">The s buttons.</param>
        /// <param name="iPCCount">The i pc count.</param>
        /// <param name="iExpAkk">The s akk.</param>
        /// <autogeneratedoc />
        [DataTestMethod()]
        [DataRow("0", 0, 0, "")]
        [DataRow("1", 2, 1, "Akkumulator:1\r\nAccumulator:\r\n")]
        [DataRow("2", 2, 2, "Akkumulator:2\r\nAccumulator:\r\n")]
        [DataRow("3", 2, 3, "Akkumulator:3\r\nAccumulator:\r\n")]
        [DataRow("4", 2, 4, "Akkumulator:4\r\nAccumulator:\r\n")]
        [DataRow("5", 2, 5, "Akkumulator:5\r\nAccumulator:\r\n")]
        [DataRow("6", 2, 6, "Akkumulator:6\r\nAccumulator:\r\n")]
        [DataRow("7", 2, 7, "Akkumulator:7\r\nAccumulator:\r\n")]
        [DataRow("8", 2, 8, "Akkumulator:8\r\nAccumulator:\r\n")]
        [DataRow("9", 2, 9, "Akkumulator:9\r\nAccumulator:\r\n")]
        [DataRow("00", 0, 0, "")]
        [DataRow("01", 2, 1, "Akkumulator:1\r\nAccumulator:\r\n")]
        [DataRow("10", 4, 10, "Akkumulator:1\r\nAccumulator:\r\nAkkumulator:10\r\nAccumulator:\r\n")]
        public void MainWindow_VM_NumButton(string sButtons, int iPCCount, int iExpAkk, string sExpPC)
        {
            foreach (var button in sButtons)
            {
                if (button >= '0' && button <= '9')
                    _ModelView.btnNummber_Click(this,$"{button}",new EventArgs());
            }
            Assert.AreEqual(iPCCount, _PropChangedCount);
            Assert.AreEqual(iExpAkk, _ModelView.Akkumulator);
            Assert.AreEqual(sExpPC, _PropChanged);
        }

        [DataTestMethod()]
        [DataRow("0", 100, 0, 100, "", "")]
        [DataRow("0", 0, 0, 0, "", "")]
        [DataRow("0", -1, 0, -1, "", "")]
        [DataRow("0", int.MaxValue, 0, int.MaxValue, "", "")]
        [DataRow("0", int.MinValue, 0, int.MinValue, "", "")]
        [DataRow("1", 100, 2, 100, "=", "OperationText:=\r\nOperationMode:\r\n")]
        [DataRow("1", 0, 2, 0, "=", "OperationText:=\r\nOperationMode:\r\n")]
        [DataRow("1", -1, 2, -1, "=", "OperationText:=\r\nOperationMode:\r\n")]
        [DataRow("1", int.MaxValue, 2, int.MaxValue, "=", "OperationText:=\r\nOperationMode:\r\n")]
        [DataRow("1", int.MinValue, 2, int.MinValue, "=", "OperationText:=\r\nOperationMode:\r\n")]
        [DataRow("2", 0, 2, 0, "+", "OperationText:+\r\nOperationMode:\r\n")]
        [DataRow("2", -1, 3, -1, "+", "OperationText:+\r\nOperationMode:\r\nRegister:-1\r\n")]
        [DataRow("2", 100, 3, 100, "+", "OperationText:+\r\nOperationMode:\r\nRegister:100\r\n")]
        [DataRow("21", 0, 4, 0, "=", "OperationText:+\r\nOperationMode:\r\nOperationText:=\r\nOperationMode:\r\n")]
        [DataRow("21", -1, 8, -2, "=", "OperationText:+\r\nOperationMode:\r\nRegister:-1\r\nAkkumulator:-2\r\nAccumulator:\r\nOperationText:=\r\nOperationMode:\r\nRegister:0\r\n")]
        [DataRow("21", 100, 8, 200, "=", "OperationText:+\r\nOperationMode:\r\nRegister:100\r\nAkkumulator:200\r\nAccumulator:\r\nOperationText:=\r\nOperationMode:\r\nRegister:0\r\n")]
        [DataRow("22", 0, 2, 0, "+", "OperationText:+\r\nOperationMode:\r\n")]
        [DataRow("22", -1, 6, -2, "+", "OperationText:+\r\nOperationMode:\r\nRegister:-1\r\nAkkumulator:-2\r\nAccumulator:\r\nRegister:-2\r\n")]
        [DataRow("22", 100, 6, 200, "+", "OperationText:+\r\nOperationMode:\r\nRegister:100\r\nAkkumulator:200\r\nAccumulator:\r\nRegister:200\r\n")]
        [DataRow("3", 100, 3, 100, "-", "OperationText:-\r\nOperationMode:\r\nRegister:100\r\n")]
        [DataRow("31", 100, 8, 0, "=", "OperationText:-\r\nOperationMode:\r\nRegister:100\r\nAkkumulator:0\r\nAccumulator:\r\nOperationText:=\r\nOperationMode:\r\nRegister:0\r\n")]
        [DataRow("311", 100, 8, 0, "=", "OperationText:-\r\nOperationMode:\r\nRegister:100\r\nAkkumulator:0\r\nAccumulator:\r\nOperationText:=\r\nOperationMode:\r\nRegister:0\r\n")]
        [DataRow("33", 100, 6, 0, "-", "OperationText:-\r\nOperationMode:\r\nRegister:100\r\nAkkumulator:0\r\nAccumulator:\r\nRegister:0\r\n")]
        [DataRow("4", 100, 3, 100, "*", "OperationText:*\r\nOperationMode:\r\nRegister:100\r\n")]
        [DataRow("41", 100, 8, 10000, "=", "Akkumulator:100\r\nMemory:100\r\nOperationText:*\r\nAkkumulator:10000\r\nMemory:0\r\nOperationText:=\r\n")]
        [DataRow("44", 100, 8, 10000, "*", "Akkumulator:100\r\nMemory:100\r\nOperationText:*\r\nAkkumulator:10000\r\nMemory:10000\r\nOperationText:*\r\n")]
        [DataRow("5", 100, 3, 100, "/", "OperationText:/\r\nOperationMode:\r\nRegister:100\r\n")]
        [DataRow("51", 100, 8, 1, "=", "Akkumulator:100\r\nMemory:100\r\nOperationText:/\r\nAkkumulator:1\r\nMemory:0\r\nOperationText:=\r\n")]
        [DataRow("55", 100, 8, 1, "/", "Akkumulator:100\r\nMemory:100\r\nOperationText:/\r\nAkkumulator:1\r\nMemory:1\r\nOperationText:/\r\n")]
        [DataRow("6", 100, 3, 100, "&", "OperationText:&\r\nOperationMode:\r\nRegister:100\r\n")]
        [DataRow("61", 100, 8, 100, "=", "Akkumulator:100\r\nMemory:100\r\nOperationText:&\r\nAkkumulator:100\r\nMemory:0\r\nOperationText:=\r\n")]
        [DataRow("66", 100, 3, 100, "&", "Akkumulator:100\r\nMemory:100\r\nOperationText:&\r\n")]
        [DataRow("7", 100, 3, 100, "|", "OperationText:|\r\nOperationMode:\r\nRegister:100\r\n")]
        [DataRow("71", 100, 8, 100, "=", "Akkumulator:100\r\nMemory:100\r\nOperationText:|\r\nAkkumulator:100\r\nMemory:0\r\nOperationText:=\r\n")]
        [DataRow("77", 100, 3, 100, "|", "Akkumulator:100\r\nMemory:100\r\nOperationText:|\r\n")]
        [DataRow("8", 100, 3, 100, "x", "OperationText:x\r\nOperationMode:\r\nRegister:100\r\n")]
        [DataRow("81", 100, 8, 0, "=", "Akkumulator:100\r\nMemory:100\r\nOperationText:x\r\nAkkumulator:0\r\nMemory:0\r\nOperationText:=\r\n")]
        [DataRow("88", 100, 8, 0, "x", "OperationText:x\r\nOperationMode:\r\nRegister:100\r\nAkkumulator:0\r\nAccumulator:\r\nRegister:0\r\n")]
        [DataRow("9", 100, 2, -101, "", "Akkumulator:-101\r\nMemory:0\r\nOperationText:\r\n")]
        [DataRow("99", 100, 4, 100, "", "Akkumulator:-101\r\nMemory:0\r\nOperationText:\r\nAkkumulator:100\r\nMemory:0\r\nOperationText:\r\n")]
        public void MainWindow_VM_OpButton(string sButtons, long iAcc, int iPCCount, long iExpAkk, string sExpOp, string sExpPC)
        {
            _ModelView.Akkumulator = iAcc;
            ClearResults();
            foreach (var button in sButtons)
            {
                if (button >= '0' && button <= '9')
                    _ModelView.btnOperator_Click(this,$"-{button}",new EventArgs());

            }
            Assert.AreEqual(iPCCount, _PropChangedCount, $"Test: {sButtons}.PCCount");
            Assert.AreEqual(iExpAkk, _ModelView.Akkumulator, $"Test: {sButtons}.Acc");
            Assert.AreEqual(sExpOp, _ModelView.OperationText, $"Test: {sButtons}.Op");
            Assert.AreEqual(sExpPC, _PropChanged, $"Test: {sButtons}.PropChanges");
        }
    }
}