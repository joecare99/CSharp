// ***********************************************************************
// Assembly         : MVVM_16_UserControl1Tests
// Author           : Mir
// Created          : 05-11-2023
//
// Last Modified By : Mir
// Last Modified On : 05-11-2023
// ***********************************************************************
// <copyright file="CurrencyValueConverterTests.cs" company="JC-Soft">
//    Copyright (c) JC-Soft. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Globalization;

/// <summary>
/// The Tests namespace.
/// </summary>
/// <autogeneratedoc />
namespace MVVM_16_UserControl1.ValueConverter.Tests;


/// <summary>
/// Defines test class CurrencyValueConverterTests.
/// </summary>
/// <autogeneratedoc />
[TestClass()]
public class CurrencyValueConverterTests
{
    /// <summary>
    /// The converter
    /// </summary>
    /// <autogeneratedoc />
    CurrencyValueConverter testConv = new();
#pragma warning disable CS8618 // Ein Non-Nullable-Feld muss beim Beenden des Konstruktors einen Wert ungleich NULL enthalten. Erwägen Sie die Deklaration als Nullable.
    private CultureInfo _cOld;
#pragma warning restore CS8618 // Ein Non-Nullable-Feld muss beim Beenden des Konstruktors einen Wert ungleich NULL enthalten. Erwägen Sie die Deklaration als Nullable.

    [TestInitialize]
    public void Init()
    {
        testConv = new();
        _cOld = CultureInfo.CurrentCulture;
        CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
    }

    [TestCleanup]
    public void Cleanup()
    {
        CultureInfo.CurrentCulture = _cOld;
    }


    /// <summary>
    /// Converts the correctly formats value.
    /// </summary>
    /// <param name="value">The value.</param>
    /// <param name="expected">The expected.</param>
    /// <autogeneratedoc />
    [DataTestMethod]
    [DataRow(10.5, "10.50€")]
    [DataRow(0.99, "0.99€")]
    [DataRow("Hallo", "Hallo")]
    [DataRow(null, "")]
    public void ConvertTest(object? value, string expected)
    {
        if (value is double d) value = (decimal)d;
        var result = testConv.Convert(value, typeof(string), null, CultureInfo.InvariantCulture);
        Assert.AreEqual(expected, result);
    }

    /// <summary>
    /// Defines the test method ConvertBackTest.
    /// </summary>
    /// <autogeneratedoc />
    [TestMethod()]
    public void ConvertBackTest()
    {
        Assert.ThrowsException<NotImplementedException>(() => testConv.ConvertBack(null, typeof(object), null, null));
    }
}