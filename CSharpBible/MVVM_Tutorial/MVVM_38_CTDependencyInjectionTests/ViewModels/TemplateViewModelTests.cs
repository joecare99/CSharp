// ***********************************************************************
// Assembly         : MVVM_38_CTDependencyInjection_netTests
// Author           : Mir
// Created          : 05-14-2023
//
// Last Modified By : Mir
// Last Modified On : 05-14-2023
// ***********************************************************************
// <copyright file="TemplateViewModelTests.cs" company="JC-Soft">
//     Copyright © JC-Soft 2023
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.ComponentModel;
using MVVM.ViewModel;
using MVVM_38_CTDependencyInjection.Models.Interfaces;
using NSubstitute;
using System.Collections.Generic;
using System;
using MVVM.View.Extension;

/// <summary>
/// The Tests namespace.
/// </summary>
/// <autogeneratedoc />
namespace MVVM_38_CTDependencyInjection.ViewModels.Tests
{
    /// <summary>
    /// Defines test class TemplateViewModelTests.
    /// </summary>
    /// <autogeneratedoc />
    [TestClass()]
    public class DependencyInjectionViewModelTests : BaseTestViewModel<DependencyInjectionViewModel>
    {
#pragma warning disable CS8618 // Ein Non-Nullable-Feld muss beim Beenden des Konstruktors einen Wert ungleich NULL enthalten. Erwägen Sie die Deklaration als Nullable.
        ITemplateModel _testDep;
#pragma warning restore CS8618 // Ein Non-Nullable-Feld muss beim Beenden des Konstruktors einen Wert ungleich NULL enthalten. Erwägen Sie die Deklaration als Nullable.
        protected override Dictionary<string, object?> GetDefaultData() 
            => new() { { nameof(DependencyInjectionViewModel.HasErrors), false}, 
                {"Now", DateTime.MinValue }, 
            };

        [TestInitialize]
        public override void Init()
        {
            _testDep = Substitute.For<ITemplateModel>();
            IoC.GetReqSrv =(t)=> t switch {
                _ when t == typeof(ITemplateModel) => _testDep,
                _ => throw new NotImplementedException()
                };
            _testDep.Now.Returns(DateTime.MinValue);
            _testDep.GetUsers().Returns(new[] { "Peter","Dave"});
            base.Init();
        }

        /// <summary>
        /// Defines the test method SetupTest.
        /// </summary>
        /// <autogeneratedoc />
        [TestMethod()]
        public void SetupTest()
        {
            Assert.IsNotNull(testModel);
            Assert.IsInstanceOfType(testModel, typeof(DependencyInjectionViewModel));
            Assert.IsInstanceOfType(testModel, typeof(BaseViewModelCT));
            Assert.IsInstanceOfType(testModel, typeof(INotifyPropertyChanged));
        }

        [TestMethod()]
        public void OnPropChgTest()
        {
            _testDep.PropertyChanged += Raise.Event<PropertyChangedEventHandler>(this, new PropertyChangedEventArgs("Now"));
            Assert.AreEqual(@"PropChg(MVVM_38_CTDependencyInjection.ViewModels.DependencyInjectionViewModel,Now)=01.01.0001 00:00:00
", DebugLog);
        }

    }
}
