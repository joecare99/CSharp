// ***********************************************************************
// Assembly         : MVVM_40_Wizzard_netTests
// Author           : Mir
// Created          : 05-14-2023
//
// Last Modified By : Mir
// Last Modified On : 05-14-2023
// ***********************************************************************
// <copyright file="Page3ViewModelTests.cs" company="JC-Soft">
//     Copyright © JC-Soft 2023
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NSubstitute;
using MVVM.ViewModel;
using BaseLib.Helper;
using BaseLib.Helper;
using static BaseLib.Helper.TestHelper;
using MVVM_40_Wizzard.Models;
using MVVM_40_Wizzard.Properties;
using MVVM_40_Wizzard.Models.Interfaces;

/// <summary>
/// The Tests namespace.
/// </summary>
/// <autogeneratedoc />
namespace MVVM_40_Wizzard.ViewModels.Tests;

/// <summary>
/// Defines test class Page3ViewModelTests.
/// </summary>
/// <autogeneratedoc />
[TestClass()]
public class Page3ViewModelTests:BaseTestViewModel<Page3ViewModel>
{
    private const string csAdditSel = "AdditSelection{0}";
#pragma warning disable CS8618 // Ein Non-Nullable-Feld muss beim Beenden des Konstruktors einen Wert ungleich NULL enthalten. Erwägen Sie die Deklaration als Nullable.
    private IWizzardModel? _model;
#pragma warning restore CS8618 // Ein Non-Nullable-Feld muss beim Beenden des Konstruktors einen Wert ungleich NULL enthalten. Erwägen Sie die Deklaration als Nullable.

    /// <summary>
    /// Initializes this instance.
    /// </summary>
    /// <autogeneratedoc />
    [TestInitialize]
    public override void Init()
    {
        IoC.GetReqSrv=(t)=>t switch
        {
            Type _t when _t == typeof(IWizzardModel) => _model ??= Substitute.For<IWizzardModel>(),
            _ => null
        };
        base.Init();
        _model!.AdditOptions.Returns(new List<int> { 1, 2, 3});
    }

    /// <summary>
    /// Defines the test method SetupTest.
    /// </summary>
    /// <autogeneratedoc />
    [TestMethod()]
    public void SetupTest()
    {
        Assert.IsNotNull(testModel);
        Assert.IsInstanceOfType(testModel, typeof(Page3ViewModel));
        Assert.IsInstanceOfType(testModel, typeof(BaseViewModelCT));
        Assert.IsInstanceOfType(testModel, typeof(INotifyPropertyChanged));
        Assert.IsNotNull(_model);
    }

    [TestMethod()]
    [DataRow(2, new[] { "" })]
    [DataRow(0, new[] { "" })]
    public void SetAdditional1Test(int iAct, string[] asExp)
    {
        testModel.Additional1 = new ListEntry(iAct, "Test");
        Assert.AreEqual(iAct, _model!.Additional1);
        Assert.AreEqual(asExp[0], DebugLog);
    }

    [TestMethod()]
    [DataRow(2, new[] { "" })]
    [DataRow(0, new[] { "" })]
    public void SetAdditional2Test(int iAct, string[] asExp)
    {
        testModel.Additional2 = new ListEntry(iAct, "Test");
        Assert.AreEqual(iAct, _model!.Additional2);
        Assert.AreEqual(asExp[0], DebugLog);
    }
    [TestMethod()]
    [DataRow(2, new[] { "" })]
    [DataRow(0, new[] { "" })]
    public void SetAdditional3Test(int iAct, string[] asExp)
    {
        testModel.Additional3 = new ListEntry(iAct, "Test");
        Assert.AreEqual(iAct, _model!.Additional3);
        Assert.AreEqual(asExp[0], DebugLog);
    }

    [DataTestMethod()]
    [DataRow(new[] { 1, 2, 3 })]
    public void AdditOptionsTest(int[] aiAct)
    {
        var lst = aiAct.Select(i => new ListEntry(i, Resources.ResourceManager.GetString(csAdditSel.Format(i)))).ToList();
        AssertAreEqual(lst, testModel.AdditOptions);
    }

    [TestMethod()]
    [DataRow(2, new[] { "" })]
    [DataRow(0, new[] { "" })]
    public void ClearTest(int iAct, string[] asExp)
    {
        testModel.Additional1 = new ListEntry(iAct, "Test");
        testModel.Additional1 = new ListEntry(iAct+1, "Test1");
        testModel.Additional1 = new ListEntry(iAct+2, "Test2");
        testModel.ClearCommand.Execute(null);
        Assert.AreEqual(null, testModel.Additional1);
        Assert.AreEqual(null, testModel.Additional2);
        Assert.AreEqual(null, testModel.Additional3);
        Assert.AreEqual(asExp[0], DebugLog);
    }

    [DataTestMethod]
    [DataRow(nameof(IWizzardModel.Now), new[] { "" })]
    [DataRow(nameof(IWizzardModel.Additional1), new[] { "PropChg(MVVM_40_Wizzard.ViewModels.Page3ViewModel,Additional1)=\r\n" })]
    [DataRow(nameof(IWizzardModel.Additional2), new[] { "PropChg(MVVM_40_Wizzard.ViewModels.Page3ViewModel,Additional2)=\r\n" })]
    [DataRow(nameof(IWizzardModel.Additional3), new[] { "PropChg(MVVM_40_Wizzard.ViewModels.Page3ViewModel,Additional3)=\r\n" })]
    [DataRow(nameof(IWizzardModel.AdditOptions), new[] { "PropChg(MVVM_40_Wizzard.ViewModels.Page3ViewModel,AdditOptions)=System.Collections.Generic.List`1[MVVM_40_Wizzard.Models.ListEntry]\r\n" })]
    [DataRow(nameof(IWizzardModel.SubSelection), new[] { "" })]
    [DataRow(nameof(IWizzardModel.SubOptions), new[] { "" })]
    public void OnMPChangedTest(string prop, string[] asExp)
    {
        _model.PropertyChanged += Raise.Event<PropertyChangedEventHandler>(_model, new PropertyChangedEventArgs(prop));
        Assert.AreEqual(asExp[0], DebugLog);
    }

}
