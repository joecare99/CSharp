using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Data;

namespace MVVM_28_DataGrid.ValueConverter.Tests
{
    [TestClass]
    public class EmailValueTests
    {
        /// <summary>
        /// The converter
        /// </summary>
        /// <autogeneratedoc />
        EmailValue testConv = new();

        [TestInitialize]
        public void Init()
        {
            testConv = new();
        }

        [TestMethod]
        public void SetupTest() {
            Assert.IsNotNull(testConv);
            Assert.IsInstanceOfType(testConv, typeof(EmailValue));
            Assert.IsInstanceOfType(testConv, typeof(IValueConverter));
        }

        [DataTestMethod]
        [DataRow(null, "")]
        [DataRow("", "")]
        [DataRow("1@2.3", "mailto:1@2.3")]
        [DataRow("info@muster.com", "mailto:info@muster.com")]
        public void ConvertTest(object? value, string expected)
        {
            if (value is double d) value = (decimal)d;
            var result = testConv.Convert(value, typeof(string), null!, CultureInfo.InvariantCulture);
            Assert.AreEqual(expected, result);
        }

        [DataTestMethod]
        [DataRow("", null)]
        [DataRow("", "")]
        [DataRow("1@2.3", "mailto:1@2.3")]
        [DataRow("info@muster.com", "mailto:info@muster.com")]
        public void ConvertBackTest(object? oExp, string sVal)
        {
            if (oExp is double d) oExp = (decimal)d;
            var result = testConv.ConvertBack(sVal, typeof(string), null!, CultureInfo.InvariantCulture);
            Assert.AreEqual(oExp, result);
        }

    }
}
