// ***********************************************************************
// Assembly         : MVVM_25_RichTextEdit_netTests
// Author           : Mir
// Created          : 05-14-2023
//
// Last Modified By : Mir
// Last Modified On : 05-14-2023
// ***********************************************************************
// <copyright file="RichTextEditViewModelTests.cs" company="JC-Soft">
//     Copyright © JC-Soft 2023
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.ComponentModel;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NSubstitute;
using MVVM.ViewModel;
using MVVM.View.Extension;
using MVVM_25_RichTextEdit.Models;

/// <summary>
/// The Tests namespace.
/// </summary>
/// <autogeneratedoc />
namespace MVVM_25_RichTextEdit.ViewModels.Tests;

/// <summary>
/// Defines test class RichTextEditViewModelTests.
/// </summary>
/// <autogeneratedoc />
[TestClass()]
public class RichTextEditViewModelTests : BaseTestViewModel<RichTextEditViewModel>
{
    /// <summary>The model</summary>
    private IRichTextEditModel? _model;

    /// <summary>
    /// Initializes this instance.
    /// </summary>
    /// <autogeneratedoc />
    [TestInitialize]
    public override void Init()
    {
        IoC.GetReqSrv = (t) => t switch
        {
            Type _t when _t == typeof(IRichTextEditModel) => _model ??= Substitute.For<IRichTextEditModel>(),
            _ => throw new System.NotImplementedException($"No code for {t}")
        };
        base.Init();
        _model.Now.Returns(new DateTime(2022, 08, 24, 12, 0, 0));
    }

    /// <summary>
    /// Defines the test method SetupTest.
    /// </summary>
    /// <autogeneratedoc />
    [TestMethod()]
    public void SetupTest()
    {
        Assert.IsNotNull(testModel);
        Assert.IsInstanceOfType(testModel, typeof(RichTextEditViewModel));
        Assert.IsInstanceOfType(testModel, typeof(BaseViewModelCT));
        Assert.IsInstanceOfType(testModel, typeof(INotifyPropertyChanged));
        Assert.IsNotNull(_model);
    }

    [DataTestMethod()]
    [DataRow(nameof(IRichTextEditModel.Now), new[] { "PropChg(MVVM_25_RichTextEdit.ViewModels.RichTextEditViewModel,Now)=24.08.2022 12:00:00\r\n" })]
    [DataRow("HasErrors", new[] { "PropChg(MVVM_25_RichTextEdit.ViewModels.RichTextEditViewModel,HasErrors)=False\r\n" })]
    [DataRow("Dummy", new[] { "PropChg(MVVM_25_RichTextEdit.ViewModels.RichTextEditViewModel,Dummy)=\r\n" })]
    public void PropertyChangedTest(string prop, string[] asExp)
    {
        _model.PropertyChanged += Raise.Event<PropertyChangedEventHandler>(_model, new PropertyChangedEventArgs(prop));
        if (prop == nameof(IRichTextEditModel.Now))
            _ = _model.Received(2).Now;
        Assert.AreEqual(asExp[0], DebugLog);
    }
}
