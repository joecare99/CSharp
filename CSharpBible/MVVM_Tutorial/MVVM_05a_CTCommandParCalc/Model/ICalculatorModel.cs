// ***********************************************************************
// Assembly         : MVVM_05a_CTCommandParCalc_net
// Author           : Mir
// Created          : 05-11-2023
//
// Last Modified By : Mir
// Last Modified On : 05-08-2023
// ***********************************************************************
// <copyright file="ICalculatorModel.cs" company="JC-Soft">
//     Copyright © JC-Soft 2023
// </copyright>
// <summary></summary>
// ***********************************************************************
using System.Collections.Generic;
using System.ComponentModel;

/// <summary>
/// The Model namespace.
/// </summary>
/// <autogeneratedoc />
namespace MVVM_05a_CTCommandParCalc.Model
{
    /// <summary>
    /// Interface ICalculatorModel
    /// Extends the <see cref="INotifyPropertyChanged" />
    /// </summary>
    /// <seealso cref="INotifyPropertyChanged" />
    /// <autogeneratedoc />
    public interface ICalculatorModel :INotifyPropertyChanged
    {

        /// <summary>
        /// Gets the accumulator.
        /// </summary>
        /// <value>The accumulator.</value>
        /// <autogeneratedoc />
        double Accumulator { get; }
        /// <summary>
        /// Gets the register.
        /// </summary>
        /// <value>The register.</value>
        /// <autogeneratedoc />
        double? Register { get; }
        /// <summary>
        /// Gets the memory.
        /// </summary>
        /// <value>The memory.</value>
        /// <autogeneratedoc />
        double? Memory { get; }
        /// <summary>
        /// Gets the dependencies.
        /// </summary>
        /// <value>The dependencies.</value>
        /// <autogeneratedoc />
        IEnumerable<(string Dest,string Src)> Dependencies { get; }
        /// <summary>
        /// Gets the trig mode.
        /// </summary>
        /// <value>The trig mode.</value>
        /// <autogeneratedoc />
        ETrigMode TrigMode { get; }
        /// <summary>
        /// Gets the calculate error.
        /// </summary>
        /// <value>The calculate error.</value>
        /// <autogeneratedoc />
        ECalcError CalcError { get; }

        /// <summary>
        /// Gets the size of the stack.
        /// </summary>
        /// <value>The size of the stack.</value>
        /// <autogeneratedoc />
        int StackSize { get; }
        /// <summary>
        /// Determines whether this instance can command the specified e c.
        /// </summary>
        /// <param name="eC">The e c.</param>
        /// <returns><c>true</c> if this instance can command the specified e c; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        bool canCommand(ECommands eC);
        /// <summary>
        /// Calculates the command.
        /// </summary>
        /// <param name="o">The o.</param>
        /// <autogeneratedoc />
        void CalcCmd(ECommands o);
        /// <summary>
        /// Determines whether this instance can operator the specified e o.
        /// </summary>
        /// <param name="eO">The e o.</param>
        /// <returns><c>true</c> if this instance can operator the specified e o; otherwise, <c>false</c>.</returns>
        /// <autogeneratedoc />
        bool canOperator(EOperations eO);
        /// <summary>
        /// Operators the command.
        /// </summary>
        /// <param name="eO">The e o.</param>
        /// <autogeneratedoc />
        void OperatorCmd(EOperations eO);
        /// <summary>
        /// Numbers the command.
        /// </summary>
        /// <param name="o">The o.</param>
        /// <autogeneratedoc />
        void NumberCmd(ENumbers o);
    }
}
