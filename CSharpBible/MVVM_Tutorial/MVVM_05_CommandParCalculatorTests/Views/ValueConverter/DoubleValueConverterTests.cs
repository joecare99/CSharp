// ***********************************************************************
// Assembly         : MVVM_05_CommandParCalculator_netTests
// Author           : Mir
// Created          : 05-11-2023
//
// Last Modified By : Mir
// Last Modified On : 05-08-2023
// ***********************************************************************
// <copyright file="DoubleValueConverterTests.cs" company="JC-Soft">
//     Copyright © JC-Soft 2023
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Globalization;

/// <summary>
/// The Tests namespace.
/// </summary>
/// <autogeneratedoc />
namespace MVVM_05_CommandParCalculator.Views.ValueConverter.Tests;


/// <summary>
/// Defines test class DoubleValueConverterTests.
/// </summary>
/// <autogeneratedoc />
[TestClass]
public class DoubleValueConverterTests
{
    /// <summary>
    /// Converts the test.
    /// </summary>
    /// <param name="value">The value.</param>
    /// <param name="parameter">The parameter.</param>
    /// <param name="fixedFactor">The fixed factor.</param>
    /// <param name="expectedResult">The expected result.</param>
    /// <autogeneratedoc />
    [DataTestMethod]
    [DataRow(123.45d, "F2", 2d, "246.90")]
    [DataRow(123.45d, "C2", 2d, "¤246.90")]
    [DataRow("Hallo", "C2", 2d, "Hallo")]
    [DataRow(null, "C2", 2d, "")]
    public void ConvertTest(object value, string parameter, double fixedFactor, string expectedResult)
    {
        // Arrange
        var converter = new DoubleValueConverter();
        converter.FixedFactor = fixedFactor;

        // Act
        var result = converter.Convert(value, typeof(string), parameter, CultureInfo.InvariantCulture);

        // Assert
        Assert.AreEqual(expectedResult, result);
    }

    /// <summary>
    /// Converts the back test.
    /// </summary>
    /// <param name="value">The value.</param>
    /// <param name="parameter">The parameter.</param>
    /// <param name="fixedFactor">The fixed factor.</param>
    /// <param name="expectedResult">The expected result.</param>
    /// <autogeneratedoc />
    [DataTestMethod]
    [DataRow("246.90", "F2", 2d, 123.45d)]
    [DataRow("246.90-", "{0}-", 2d, double.NaN)]
    [DataRow("246.90 ¤", "0.00 ¤", 2d, 123.45d)]
    [DataRow("246.X ¤", "0.00 ¤", 2d, double.NaN)]
    [DataRow(null, "0.00 ¤", 2d, 0d)]
    public void ConvertBackTest(string value, string parameter, double fixedFactor, double expectedResult)
    {
        // Arrange
        var converter = new DoubleValueConverter();
        converter.FixedFactor = fixedFactor;

        // Act
        var result = converter.ConvertBack(value, typeof(double), parameter, CultureInfo.InvariantCulture);

        // Assert
        Assert.AreEqual(expectedResult, result);
    }
}
