using CommunityToolkit.Mvvm.Input;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MVVM.ViewModel;
using System;
using System.Collections.Generic;
using System.ComponentModel;

namespace MVVM_09_DialogBoxes.ViewModels.Tests;

[TestClass()]
public class DialogWindowViewModelTests : BaseTestViewModel<DialogWindowViewModel>
{

    /// <summary>
    /// Initializes this instance.
    /// </summary>
    /// <autogeneratedoc />
    [TestInitialize]
    public override void Init()
    {
        base.Init();
        testModel.DoCancel += DoCancelTest;
        testModel.DoOK += DoOKTest;
    }

    private void DoOKTest(object? o, EventArgs e)
    {
       DoLog($"DoOK({o},{e})"); 
    }

    private void DoCancelTest(object? o, EventArgs e)
    {
        DoLog($"DoCancel({o},{e})");
    }

    /// <summary>
    /// Defines the test method SetupTest.
    /// </summary>
    /// <autogeneratedoc />
    [TestMethod()]
    public void SetupTest()
    {
        Assert.IsNotNull(testModel);
        Assert.IsNotNull(testModel2);
        Assert.IsInstanceOfType(testModel, typeof(DialogWindowViewModel));
        Assert.IsInstanceOfType(testModel, typeof(BaseViewModel));
        Assert.IsInstanceOfType(testModel, typeof(INotifyPropertyChanged));
        Assert.IsNotNull(testModel.CancelCommand);
        Assert.IsInstanceOfType(testModel.CancelCommand, typeof(IRelayCommand));
        Assert.IsNotNull(testModel.OKCommand);
        Assert.IsInstanceOfType(testModel.OKCommand, typeof(IRelayCommand));
    }

    [DataTestMethod()]
    [DataRow(true, new[] { @"DoCancel(MVVM_09_DialogBoxes.ViewModels.DialogWindowViewModel,System.EventArgs)
" })]
    [DataRow(false, new[] { @"" })]
    [DataRow(null, new[] { @"DoCancel(MVVM_09_DialogBoxes.ViewModels.DialogWindowViewModel,System.EventArgs)
" })]
    public void CancelCommandTest(bool? oAct, string[] asExp)
    {
        Assert.IsTrue(testModel.CancelCommand.CanExecute(oAct));
        if (oAct == false) testModel.DoCancel -= DoCancelTest; 
        testModel.CancelCommand.Execute(oAct);
        Assert.AreEqual(asExp[0], DebugLog);
    }

    [DataTestMethod()]
    [DataRow(true, new[] { @"DoOK(MVVM_09_DialogBoxes.ViewModels.DialogWindowViewModel,System.EventArgs)
" })]
    [DataRow(false, new[] { @"" })]
    [DataRow(null, new[] { @"DoOK(MVVM_09_DialogBoxes.ViewModels.DialogWindowViewModel,System.EventArgs)
" })]
    public void OKCommandTest(bool? oAct, string[] asExp)
    {
        Assert.IsTrue(testModel.OKCommand.CanExecute(oAct));
        if (oAct == false) testModel.DoOK -= DoOKTest;
        testModel.OKCommand.Execute(oAct);
        Assert.AreEqual(asExp[0], DebugLog);
    }

    protected override Dictionary<string, object?> GetDefaultData() 
        => new() { {nameof(DialogWindowViewModel.Email),"" }, { nameof(DialogWindowViewModel.Name), "" }, };
}
