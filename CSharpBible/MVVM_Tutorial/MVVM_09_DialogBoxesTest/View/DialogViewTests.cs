// ***********************************************************************
// Assembly         : MVVM_00a_CTTemplate_netTests
// Author           : Mir
// Created          : 05-14-2023
//
// Last Modified By : Mir
// Last Modified On : 05-14-2023
// ***********************************************************************
// <copyright file="MainWindowTests.cs" company="JC-Soft">
//     Copyright © JC-Soft 2023
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MVVM.ViewModel;
using MVVM_09_DialogBoxes.ViewModels;
using NSubstitute;
using System.ComponentModel;
using System.Threading;
using System.Windows;

/// <summary>
/// The Tests namespace.
/// </summary>
/// <autogeneratedoc />
namespace MVVM_09_DialogBoxes.Views.Tests;

/// <summary>
/// Defines test class MainWindowTests.
/// </summary>
/// <autogeneratedoc />
[TestClass()]
public class DialogViewTests : BaseTestViewModel
{
#pragma warning disable CS8618 // Ein Non-Nullable-Feld muss beim Beenden des Konstruktors einen Wert ungleich NULL enthalten. Erwägen Sie die Deklaration als Nullable.
    /// <summary>
    /// The test view
    /// </summary>
    /// <autogeneratedoc />
    DialogView testView;
    DialogViewModel vm;
    private MessageBoxResult mbResult;
    private bool? xResult;
    private string sNewName = "NewName";
    private string sNewEmail = "NewEmail";
#pragma warning restore CS8618 // Ein Non-Nullable-Feld muss beim Beenden des Konstruktors einen Wert ungleich NULL enthalten. Erwägen Sie die Deklaration als Nullable.

    /// <summary>
    /// Initializes this instance.
    /// </summary>
    /// <autogeneratedoc />
    [TestInitialize]
    public void Init()
    {
        var t = new Thread(() => { 
            testView = new();
            vm = (DialogViewModel)testView.DataContext; 
            testView.Dialog_Loaded(this,null!); 
        });
        t.SetApartmentState(ApartmentState.STA); //Set the thread to STA
        t.Start();
        t.Join(); //Wait for the thread to end
        vm.PropertyChanged += OnVMPropertyChanged;
        if (vm is INotifyPropertyChanging npchgn)
            npchgn.PropertyChanging += OnVMPropertyChanging;
        Assert.IsNotNull(testView.NewDialogWindow);
        try { Assert.IsNotNull(testView.NewDialogWindow()); }
        catch { }
        Assert.IsNotNull(testView.MessageBoxShow);
        testView.MessageBoxShow = MyMBShow;
        testView.NewDialogWindow = () =>
        {
            var dw = Substitute.For<IDialogWindow>();
            dw.ShowDialog().Returns((c) =>
            {
                DoLog($"ShowDialog()=>{xResult}");
                var vm = dw.DataContext as DialogWindowViewModel;
                vm!.Name = sNewName;
                vm!.Email = sNewEmail;
                return xResult;
            });
            dw.DataContext.Returns(new DialogWindowViewModel());
            return dw;
        };
    }

    private MessageBoxResult MyMBShow(string arg1, string arg2, MessageBoxButton button)
    {
        DoLog($"MyMBShow({arg1},{arg2},{button})=>{mbResult}");
        return mbResult;
    }

    /// <summary>
    /// Defines the test method MainWindowTest.
    /// </summary>
    /// <autogeneratedoc />
    [TestMethod()]
    public void MainWindowTest()
    {
        Assert.IsNotNull(testView);
        Assert.IsInstanceOfType(testView, typeof(DialogView));    
        Assert.IsNotNull(vm);
        Assert.IsInstanceOfType(vm, typeof(DialogViewModel));
        Assert.IsNotNull(vm.DoOpenDialog);
        Assert.IsNotNull(vm.DoOpenMessageBox);
    }

    [DataTestMethod]
    [DataRow("OKTitle", "OKLine", MessageBoxResult.OK, new[] { "MyMBShow(OKTitle,OKLine,YesNo)=>OK\r\n" })]
    [DataRow("CancelTitle", "CancelLine", MessageBoxResult.Cancel, new[] { "MyMBShow(CancelTitle,CancelLine,YesNo)=>Cancel\r\n" })]
    [DataRow("YesTitle", "YesLine", MessageBoxResult.Yes, new[] { "MyMBShow(YesTitle,YesLine,YesNo)=>Yes\r\n" })]
    public void DoOpenMessageBoxTest(string sAct1,string sAct2, MessageBoxResult xRes, string[] asExp)
    {         
        mbResult = xRes;
        Assert.AreEqual(xRes, vm.DoOpenMessageBox!.Invoke(sAct1, sAct2));
        Assert.AreEqual(asExp[0], DebugLog);
    }


    [DataTestMethod]
    [DataRow("OKName", "OKMail", "OKName1", "OKMail1", true, new[] { "ShowDialog()=>True\r\n", "OKName1", "OKMail1" })]
    [DataRow("NoName", "NoMail", "NoName1", "NoMail1", false, new[] { "ShowDialog()=>False\r\n", "NoName", "NoMail" })]
    [DataRow("Name", "Mail", "Name1", "Mail1", null, new[] { "ShowDialog()=>\r\n", "Name", "Mail" })]
    public void DoDialogWindowTest(string sAct1, string sAct2, string sAct3, string sAct4, bool? xRes, string[] asExp)
    {
        xResult = xRes;
        sNewName = sAct3;
        sNewEmail = sAct4;
        var tRes = vm.DoOpenDialog!.Invoke(sAct1, sAct2);
        Assert.AreEqual(asExp[1], tRes.name);
        Assert.AreEqual(asExp[2], tRes.email);
        Assert.AreEqual(asExp[0], DebugLog);
    }
}
