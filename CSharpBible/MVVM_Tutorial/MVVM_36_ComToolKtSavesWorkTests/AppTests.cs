using CommunityToolkit.Mvvm.Messaging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MVVM.View.Extension;
using MVVM_36_ComToolKtSavesWork.Models;
using MVVM_36_ComToolKtSavesWork.ViewModels;
using System;
using System.Collections.Generic;

namespace MVVM_36_ComToolKtSavesWork.Tests;

internal class TestApp : App
{
    public void DoStartUp()
    {
        OnStartup(null);
    }
}
[TestClass()]
public class AppTests
{
    static TestApp app = new();
#pragma warning disable CS8618 // Ein Non-Nullable-Feld muss beim Beenden des Konstruktors einen Wert ungleich NULL enthalten. Erwägen Sie die Deklaration als Nullable.
    private Func<Type, object?> _gsold;
    private Func<Type, object> _grsold;
#pragma warning restore CS8618 // Ein Non-Nullable-Feld muss beim Beenden des Konstruktors einen Wert ungleich NULL enthalten. Erwägen Sie die Deklaration als Nullable.

    /// <summary>
    /// Initializes this instance.
    /// </summary>
    /// <autogeneratedoc />
    [TestInitialize]
    public void Init()
    {
        _gsold = IoC.GetSrv;
        _grsold = IoC.GetReqSrv;
        if (_d.Count==0)
        foreach(var i in NeededInterfaces)
            Assert.IsTrue(_d.TryGetValue(i[0].ToString(), out _));
    }

    [TestCleanup]
    public void CleanUp()
    {
        IoC.GetSrv = _gsold;
        IoC.GetReqSrv = _grsold;
    }

    [TestMethod]
    public void AppTest()
    {
        Assert.IsNotNull(app);
    }

    private static Dictionary<string, Type> _d = new();

    private static object[] Types<T>(bool xExp)
    {
        _d[typeof(T).Name] = typeof(T);
        return new object[] { typeof(T).Name, xExp };
    }
    static IEnumerable<object[]> NeededInterfaces => new[]
    {
        Types<IUserRepository>(true) ,
        Types<ICommunityToolkit2Model>(true ),
        Types<IMessenger>(true ),
        Types<MainWindowViewModel>(true ),
        Types<CommunityToolkit2ViewModel>(true),
        Types<UserInfoViewModel>(true),
        Types<LoginViewModel>(true),
        Types<App>(false)
    };

    [TestMethod]
    [DynamicData(nameof(NeededInterfaces))]
    public void AppTest2(string s, bool xExp)
    {
        var tAct = _d[s];
        app.DoStartUp();
        if (xExp)
            Assert.IsNotNull(IoC.GetReqSrv(tAct));
        else
            Assert.IsNull(IoC.GetSrv(tAct));
    }

}