// ***********************************************************************
// Assembly         : MVVM_39_MultiModelTest_netTests
// Author           : Mir
// Created          : 05-14-2023
//
// Last Modified By : Mir
// Last Modified On : 05-14-2023
// ***********************************************************************
// <copyright file="MultiModelMainViewModelTests.cs" company="JC-Soft">
//     Copyright © JC-Soft 2023
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.ComponentModel;
using MVVM.ViewModel;
using MVVM_39_MultiModelTest.Models;
using MVVM.View.Extension;

/// <summary>
/// The Tests namespace.
/// </summary>
/// <autogeneratedoc />
namespace MVVM_39_MultiModelTest.ViewModels.Tests
{
    /// <summary>
    /// Defines test class MultiModelMainViewModelTests.
    /// </summary>
    /// <autogeneratedoc />
    [TestClass()]
    public class MultiModelMainViewModelTests:BaseTestViewModel<MultiModelMainViewModel>
    {
        private ISystemModel systemModel;

        /// <summary>
        /// Initializes this instance.
        /// </summary>
        /// <autogeneratedoc />
        [TestInitialize]
        public override void Init()
        {
            systemModel = NSubstitute.Substitute.For<ISystemModel>();
            IoC.GetReqSrv= (t) => t switch
            {
                _ when t == typeof(ISystemModel) => systemModel,
                _ => throw new System.NotImplementedException()
            };
            base.Init();
            ClearLog();
        }

        /// <summary>
        /// Defines the test method SetupTest.
        /// </summary>
        /// <autogeneratedoc />
        [TestMethod()]
        public void SetupTest()
        {
            Assert.IsNotNull(testModel);
            Assert.IsInstanceOfType(testModel, typeof(MultiModelMainViewModel));
            Assert.IsInstanceOfType(testModel, typeof(BaseViewModelCT));
            Assert.IsInstanceOfType(testModel, typeof(INotifyPropertyChanged));
        }
    }
}
