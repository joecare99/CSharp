//***************************************************************
// Assembly         : SomeGame_Base
// Author           : Mir
// Created          : 01-01-2025
//
// Last Modified By : Mir
// Last Modified On : 01-01-2025
// ***********************************************************************
// <copyright file="VTileDef.cs" company="JC-Soft">
//     Copyright (c) JC-Soft. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using ConsoleDisplay.View;
using System.Drawing;

/// <summary>
/// The View namespace.
/// </summary>
/// <autogeneratedoc />
namespace Console.Views;

/// <summary>
/// Class TileDef.
/// Implements the <see cref="TileDef{Tiles}" /></summary>
/// <seealso cref="TileDef{Tiles}" />
public class TileDef : TileDefBase
{
    /// <summary>
    /// The tile definition string
    /// </summary>
    private readonly string[][] _vTileDefStr = [
        [@"    "], //Empty
        [@"=-=-", @"-=-="], //Dirt
        [@"─┴┬─", @"─┬┴─"], //Wall
        [@" ╓╖ ", @"▓░▒▓"], //Destination
        [@"⌐°@)", @" ⌡⌡‼"], //Player
        [@"/¯¯\", @"\__/"], //Stone
        [@"]°°[", @"_!!_"], //Enemy_Up
        [@"◄°@[", @"_!!\"], //Enemy_Right
        [@"]oo[", @"_!!_"], //Enemy_Dwn
        [@"]@°►", @"/!!_"], //Enemy_Left
        [@"/╨╨\", @"\__/"], //StoneMoving
        [@" +*∩", @"╘═◊@"], //PlayerDead
        [@"    "], //Dummy
        [@"─┴┬┴", @"─┬┴─"], //Wall_U
        [@"┬┴┬─", @"┴┬┴─"], //Wall_W
        [@"┬┴┬┴", @"┴┬┴─"], //Wall_UW
        [@"┬┴┬─", @"┴┬┴┬"], //Wall_D
        [@"┬┴┬┴", @"┴┬┴┬"], //Wall_UD
        [@"┬┴┬─", @"┴┬┴┬"], //Wall_WD
        [@"┬┴┬┴", @"┴┬┴┬"], //Wall_UWD
        [@"─┴┬─", @"─┬┴─"], //Wall_E
        [@"─┴┬┴", @"─┬┴─"], //Wall_UE
        [@"┬┴┬─", @"┴┬┴─"], //Wall_WE
        [@"┬┴┬┴", @"┴┬┴─"], //Wall_UWE
        [@"┬┴┬─", @"┴┬┴┬"], //Wall_DE
        [@"┬┴┬┴", @"┴┬┴┬"], //Wall_UDE
        [@"┬┴┬─", @"┴┬┴┬"], //Wall_WDE
        [@"┬┴┬┴", @"┴┬┴┬"], //Wall_UWDE
    ];


    /// <summary>
    /// The tile colors
    /// </summary>
    private readonly byte[][] _vTileColors = [
        [0x00], //Empty
        [0x6E], //Dirt
        [0x4F], //Wall
        [0x0E, 0x0E, 0x0E, 0x0E, 0x2A, 0x22, 0x02, 0x22], //Destination
        [0x6F], //Player
        [0x6E], //Stone
        [0x1A, 0xA0, 0xA0, 0x1A], //Enemy_Up
        [0x1A, 0xA0, 0xA0, 0x1A], //Enemy_Right
        [0x1A, 0xA0, 0xA0, 0x1A], //Enemy_Dwn
        [0x1A, 0xA0, 0xA0, 0x1A], //Enemy_Left
        [0x6E], //StoneMoving
        [0x6F], //PlayerDead
        [0x6E], //Dummy
        [0x4F], //Wall_U
        [0x4F], //Wall_W
        [0x4F], //Wall_UW
        [0x4F], //Wall_D
        [0x4F], //Wall_UD
        [0x4F], //Wall_WD
        [0x4F], //Wall_UWD
        [0x4F], //Wall_E
        [0x4F], //Wall_UE
        [0x4F], //Wall_WE
        [0x4F], //Wall_UWE
        [0x4F], //Wall_DE
        [0x4F], //Wall_UDE
        [0x4F], //Wall_WDE
        [0x4F], //Wall_UWDE
    ];

    /// <summary>
    /// Gets the tile definition.
    /// </summary>
    /// <param name="tile">The tile.</param>
    /// <returns>(string[] lines, (System.ConsoleColor fgr, System.ConsoleColor bgr)[] colors).</returns>
    /// <autogeneratedoc />
    public override (string[] lines, (ConsoleColor fgr, ConsoleColor bgr)[] colors) GetTileDef(Enum? tile)
    {
        (string[] lines, (ConsoleColor fgr, ConsoleColor bgr)[] colors) result = default;
        result.lines = GetArrayElement(_vTileDefStr, tile);

        result.colors = new (ConsoleColor fgr, ConsoleColor bgr)[result.lines.Length * result.lines[0].Length];
        byte[] colDef = GetArrayElement(_vTileColors, tile);
        for (var i = 0; i < result.lines.Length * result.lines[0].Length; i++)
            result.colors[i] = ByteTo2ConsColor(colDef[i % colDef.Length]);
        return result;
    }

    public TileDef() : base() => TileSize = new Size(4, 2);
}