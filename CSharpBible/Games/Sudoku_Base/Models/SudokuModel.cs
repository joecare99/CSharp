// ***********************************************************************
// Assembly         : MVVM_41_Sudoku
// Author           : Mir
// Created          : 05-19-2023
//
// Last Modified By : Mir
// Last Modified On : 05-19-2023
// ***********************************************************************
// <copyright file="SudokuModel.cs" company="JC-Soft">
//     Copyright © JC-Soft 2023
// </copyright>
// <summary></summary>
// ***********************************************************************
using BaseLib.Interfaces;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Sudoku_Base.Models.Interfaces;
using System;
using System.Collections.Generic;
using System.IO;
using System.Timers;

/// <summary>
/// The Models namespace.
/// </summary>
/// <autogeneratedoc />
namespace Sudoku_Base.Models
{
    /// <summary>
    /// Class SudokuModel.
    /// Implements the <see cref="ObservableObject" />
    /// Implements the <see cref="ISudokuModel" />
    /// </summary>
    /// <seealso cref="ObservableObject" />
    /// <seealso cref="ISudokuModel" />
    /// <autogeneratedoc />
    public partial class SudokuModel : ObservableObject, ISudokuModel
    {
        private const string csApplStart = "Application startet";
#if !NET5_0_OR_GREATER
        private const string csApplEnded = "Application ended";
#endif
        #region Properties
        /// <summary>
        /// The timer
        /// </summary>
        /// <autogeneratedoc />
        private readonly Timer _timer;
        private readonly ISysTime _systime;
        private readonly ILog _log;


        #endregion

        #region Methods
        /// <summary>
        /// Initializes a new instance of the <see cref="SudokuModel"/> class.
        /// </summary>
        /// <autogeneratedoc />
        public SudokuModel(ISysTime sysTime, ILog log)
        {
            _systime = sysTime;
            _log = log;
            _log.Log(csApplStart);
            _timer = new(250d);
//            _timer.Elapsed += (s, e) => OnPropertyChanged(nameof(Now));
            _timer.Start();
        }

#if !NET5_0_OR_GREATER
        /// <summary>
        /// Finalizes an instance of the <see cref="MainWindowViewModel" /> class.
        /// </summary>
        ~SudokuModel()
        {
            _timer.Stop();
            _log.Log(csApplEnded);
            return;
        }
#endif

        public IReadOnlyList<ISudokuField> Fields => throw new NotImplementedException();

        [RelayCommand]
        private void Undo() 
            => throw new NotImplementedException();

        [RelayCommand]
        private void Redo() 
            => throw new NotImplementedException();

        public void Clear()
        {
            throw new NotImplementedException();
        }

        public bool ReadFromStream(Stream stream)
        {
            if (stream == null) return false;
            var streamBytes = new byte[sizeof(int)];
            stream.Read(streamBytes, 0, sizeof(int));
            var c= BitConverter.ToInt32(streamBytes,0);
            var fields = new List<ISudokuField>();
            for (int i = 0; i < Math.Min(c,81); i++)
            {
                var field = new SudokuField();
                field.ReadFromStream(stream);
            }
            return true;
        }

        public bool WriteToStream(Stream stream, bool xInclState)
        {
            if (stream == null) return false;
            stream.Write(BitConverter.GetBytes(Fields.Count), 0, sizeof(int));
            foreach (var field in Fields)
            {
                field.WriteToStream(stream);
            }
            ClearUndoList();
            return true;
        }

        private void ClearUndoList()
        {
            throw new NotImplementedException();
        }
        #endregion
    }
}
