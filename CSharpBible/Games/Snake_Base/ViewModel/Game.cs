// ***********************************************************************
// Assembly         : Snake_Base
// Author           : Mir
// Created          : 08-25-2022
//
// Last Modified By : Mir
// Last Modified On : 09-09-2022
// ***********************************************************************
// <copyright file="Game.cs" company="JC-Soft">
//     Copyright (c) JC-Soft. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using Snake_Base.Model;
using System;
using System.Drawing;

/// <summary>
/// The ViewModel namespace.
/// </summary>
/// <autogeneratedoc />
namespace Snake_Base.ViewModel
{
    /// <summary>
    /// Class Game.
    /// </summary>
    public class Game
    {
        #region Properties
        #region private Properties
        /// <summary>
        /// The random
        /// </summary>
        /// <autogeneratedoc />
        private static Random? _rnd;
        #endregion
        /// <summary>
        /// Gets or sets the playfield.
        /// </summary>
        /// <value>The playfield.</value>
        public Playfield2D<SnakeGameObject> Playfield { get; set; } = new Playfield2D<SnakeGameObject>();
        /// <summary>
        /// Gets or sets the snake.
        /// </summary>
        /// <value>The snake.</value>
        public Snake Snake { get; set; }
        /// <summary>
        /// The get next random
        /// </summary>
        public Func<int, int> GetNextRnd = (i) => (_rnd ?? (_rnd = new Random())).Next(i);
        public int Level;
        public Action<object?, bool> visUpdate;
        public Action<object?, EventArgs?> visFullRedraw;
        public static readonly object MaxLives;

        /// <summary>
        /// Gets the <see cref="Tiles" /> with the specified p.
        /// </summary>
        /// <param name="p">The p.</param>
        /// <returns>Tiles.</returns>
        public Tiles this[Point p] => GetTile(p);

        /// <summary>
        /// Gets a value indicating whether this instance is running.
        /// </summary>
        /// <value><c>true</c> if this instance is running; otherwise, <c>false</c>.</value>
        public bool IsRunning => Snake.alive;

        public object Score { get; set; }
        public object Lives { get; set; }
        public Size size { get; set; }
        #endregion

        #region Methods
        /// <summary>
        /// Initializes a new instance of the <see cref="Game" /> class.
        /// </summary>
        public Game()
        {
            Playfield.PfSize = new Size(20, 20);
            Playfield.OnDataChanged += PfDataChange;
            Snake = new Snake(new Point(10,10),Playfield);
        }

        /// <summary>
        /// Pfs the data change.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The e.</param>
        /// <exception cref="System.NotImplementedException"></exception>
        /// <autogeneratedoc />
        private void PfDataChange(object? sender, (string prop, object? oldVal, object? newVal) e)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Games the step.
        /// </summary>
        /// <returns>System.Int32.</returns>
        public int GameStep()
        {

            return 50;
        }

        /// <summary>
        /// Gets the tile.
        /// </summary>
        /// <param name="p">The p.</param>
        /// <returns>Tiles.</returns>
        public Tiles GetTile(Point p)
        {
            Tiles result = Tiles.Empty;
            var field = Playfield[p];
            switch(field)
            {
                case Apple a: result = Tiles.Apple; break;
                case SnakeHead sh: result = Tiles.SnakeHead_N;break;
                case SnakeTail st: result = Tiles.SnakeTail_N;break;
                case SnakeBodyPart sb: result = Tiles.SnakeBody_NS; break;
                default:
                    if (Playfield.IsInside(p))
                        result = Tiles.Empty;
                    else
                        result = Tiles.Wall;
                    break;
            }
            return result;
        }

        public Point OldPos(Point arg)
        {
            throw new NotImplementedException();
        }

        #endregion
    }
}
