// ***********************************************************************
// Assembly         : Snake_Base
// Author           : Mir
// Created          : 08-25-2022
//
// Last Modified By : Mir
// Last Modified On : 09-09-2022
// ***********************************************************************
// <copyright file="Game.cs" company="JC-Soft">
//     Copyright (c) JC-Soft. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using Snake_Base.Model;
using System;
using System.Drawing;

/// <summary>
/// The ViewModel namespace.
/// </summary>
/// <autogeneratedoc />
namespace Snake_Base.ViewModel
{
    /// <summary>
    /// Class Game.
    /// </summary>
    public class Game
    {
        #region Properties
        #region private Properties
        /// <summary>
        /// The random
        /// </summary>
        /// <autogeneratedoc />
        private static Random? _rnd;
        #endregion
        /// <summary>
        /// Gets or sets the playfield.
        /// </summary>
        /// <value>The playfield.</value>
        public Playfield2D<SnakeGameObject> Playfield { get; set; } = new Playfield2D<SnakeGameObject>();
        /// <summary>
        /// Gets or sets the snake.
        /// </summary>
        /// <value>The snake.</value>
        public Snake Snake { get; set; }
        /// <summary>
        /// The get next random
        /// </summary>
        public Func<int, int> GetNextRnd = (i) => (_rnd ?? (_rnd = new Random())).Next(i);
        public int Level;
        public Action<object?, bool> visUpdate;
        public Action<object?, EventArgs?> visFullRedraw;
		private Direction sDir;
		private bool _userQuit = false;
        private bool xHalfStep;
        public static readonly object MaxLives;

        /// <summary>
        /// Gets the <see cref="Tiles" /> with the specified p.
        /// </summary>
        /// <param name="p">The p.</param>
        /// <returns>Tiles.</returns>
        public Tiles this[Point p] => GetTile(p);

        /// <summary>
        /// Gets a value indicating whether this instance is running.
        /// </summary>
        /// <value><c>true</c> if this instance is running; otherwise, <c>false</c>.</value>
        public bool IsRunning => Snake.alive && !_userQuit;

        public object Score { get; set; }
        public object Lives { get; set; }
        public Size size { get => new Size(Playfield.PfSize.Width+2,Playfield.PfSize.Height+2);  }
        #endregion

        #region Methods
        /// <summary>
        /// Initializes a new instance of the <see cref="Game" /> class.
        /// </summary>
        public Game()
        {     
            _rnd = new Random();
            Playfield.PfSize = new Size(20, 20);
            Playfield.OnDataChanged += PfDataChange;
            SnakeGameObject.DefaultParent = Playfield;
            Snake = new Snake(new Point(10,10));
            Snake.OnSnakeEatsApple += OnSnakeEatsApple;
        }

        private void OnSnakeEatsApple(object? sender, EventArgs e)
        {
            NewApple();
        }

        private void NewApple()
        {
            // Getplace for apple
            Point p;
            //   Get Random Startplace
            var w = Playfield.PfSize.Width;
            var sp = _rnd.Next(Playfield.PfSize.Height * w);
            while (Playfield[p=new Point(sp % w,sp / w)]!=null)
                sp++;
            //
            var a=new Apple(p, Playfield);
            a.ResetOldPlace();
        }

        /// <summary>
        /// Pfs the data change.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The e.</param>
        /// <exception cref="System.NotImplementedException"></exception>
        /// <autogeneratedoc />
        private void PfDataChange(object? sender, (string prop, object? oldVal, object? newVal) e)
        {
            //          throw new NotImplementedException();
        }

        /// <summary>
        /// Games the step.
        /// </summary>
        /// <returns>System.Int32.</returns>
        public int GameStep()
        {
            xHalfStep = !xHalfStep;
            if (xHalfStep)
            {
                foreach (var i in Playfield.Items)
                    i.ResetOldPlace();
                Snake.SnakeMove(sDir);
            }
            visUpdate?.Invoke(this, xHalfStep);
            return 150;
        }

        /// <summary>
        /// Gets the tile.
        /// </summary>
        /// <param name="p">The p.</param>
        /// <returns>Tiles.</returns>
        public Tiles GetTile(Point p)
        {
            Tiles result = Tiles.Empty;
            var field = Playfield[p];
            switch(field)
            {
                case Apple a: result = Tiles.Apple; break;
                case SnakeHead sh:
                    {
                        var np = Point.Subtract(sh.Place, (Size)sh.NextPart?.Place);
                        switch ((np.X, np.Y))
                        {
                            case (1, 0): result = Tiles.SnakeHead_E; break;
                            case (-1, 0): result = Tiles.SnakeHead_W; break;
                            case (0, 1): result = Tiles.SnakeHead_S; break;
                            case (0, -1): result = Tiles.SnakeHead_N; break;
                        }
                        break;
                    }
                case SnakeTail st: {
                        var np = Point.Subtract(st.Place, (Size)st.PrevPart?.Place);
                        switch ((np.X, np.Y))
                        {
                            case (1, 0): result = Tiles.SnakeTail_W; break;
                            case (-1, 0): result = Tiles.SnakeTail_E; break;
                            case (0, 1): result = Tiles.SnakeTail_N; break;
                            case (0, -1): result = Tiles.SnakeTail_S; break;
                        }
                        break; }
                case SnakeBodyPart sb: {
                        var nx = Point.Subtract(sb.Place, (Size)sb.NextPart?.Place);
                        var np = Point.Subtract(sb.Place, (Size)sb.PrevPart?.Place);
                        switch ((np.X+nx.X, np.Y+nx.Y))
                        {
                            case (0, 0) when nx.Y==0: result = Tiles.SnakeBody_WE; break;
                            case (0, 0) when nx.X == 0: result = Tiles.SnakeBody_NS; break;
                            case (1, 1): result = Tiles.SnakeBody_NE; break;
                            case (-1, 1): result = Tiles.SnakeBody_NW; break;
                            case (-1, -1): result = Tiles.SnakeBody_SW; break;
                            case (1, -1): result = Tiles.SnakeBody_SE; break;
                        }
                        break; 
                    }
                default:
                    if (Playfield.IsInside(p))
                        result = Tiles.Empty;
                    else
                        result = Tiles.Wall;
                    break;
            }
            return result;
        }

        public Point OldPos(Point arg)
        {
            return Playfield[arg]?.OldPlace ?? arg;
        }

		public void HandleUserAct(UserAction action) {
			if (action <= UserAction.GoEast)
				sDir = (Direction)action;
			else if (action <= UserAction.Quit)
				_userQuit = true;
		}

        public void Setup(int v)
        {
            NewApple();
            //throw new NotImplementedException();
        }

        #endregion
    }
}
