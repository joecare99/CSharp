// ***********************************************************************
// Assembly         : Snake_BaseTests
// Author           : Mir
// Created          : 08-24-2022
//
// Last Modified By : Mir
// Last Modified On : 09-09-2022
// ***********************************************************************
// <copyright file="Playfield2DTests.cs" company="JC-Soft">
//     Copyright (c) JC-Soft. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using BaseLib.Interfaces;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Snake_Base.Model;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Reflection;
using System.Reflection.Metadata.Ecma335;
using System.Text;
using System.Threading.Tasks;

/// <summary>
/// The Tests namespace.
/// </summary>
/// <autogeneratedoc />
namespace Snake_Base.Model.Tests
{
    /// <summary>
    /// Defines test class Playfield2DTests.
    /// </summary>
    [TestClass()]
    public class Playfield2DTests
    {
        /// <summary>
        /// The result data
        /// </summary>
        /// <autogeneratedoc />
        private string ResultData = "";

        /// <summary>
        /// Gets the test playfield.
        /// </summary>
        /// <value>The test playfield.</value>
        internal Playfield2D<SnakeGameObject>? testPlayfield { get; private set; }

        /// <summary>
        /// Initializes this instance.
        /// </summary>
        [TestInitialize]
        public void Init()
        {
            testPlayfield = new Playfield2D<SnakeGameObject>(new Size(4, 3));
            testPlayfield.OnDataChanged += TPF_OnDataChanged; 
            TestItem.logOperation += LogOperation;
            ResultData = "";
        }

        private void TPF_OnDataChanged(object? sender, (string prop, object? oldVal, object? newVal) e)
        {
            ResultData += $"OnDataChanged: {sender}\to:{e.oldVal}\tn:{e.newVal}\tp:{e.prop}\r\n";
        }

        /// <summary>
        /// Logs the operation.
        /// </summary>
        /// <param name="sOperation">The s operation.</param>
        /// <param name="sender">The sender.</param>
        /// <param name="oldVal">The old value.</param>
        /// <param name="newVal">The new value.</param>
        /// <param name="sProp">The s property.</param>
        /// <autogeneratedoc />
        private void LogOperation(string sOperation, TestItem sender, object? oldVal, object? newVal, string sProp)
        {
            ResultData += $"{sOperation}: {sender}\to:{oldVal}\tn:{newVal}\tp:{sProp}\r\n";
        }

        /// <summary>
        /// Defines the test method Playfield2DTest.
        /// </summary>
        [TestMethod()]
        public void Playfield2DTest()
        {
            Assert.Fail();
        }

        /// <summary>
        /// Defines the test method AddItemTest.
        /// </summary>
        [DataTestMethod()]
        [TestProperty("Author", "J.C.")]
        [TestCategory("AddData")]
        [DataRow("Nothing", new int[] { 0, 0 }, "Snake_Base.Model.Tests.TestItem", new string[] {
            "New Parent: TestItem(,{X=0,Y=0})\to:\tn:Snake_Base.Model.Playfield2D`1[Snake_Base.Model.SnakeGameObject]\tp:AddItemTest1\r\n" })]
        [DataRow("Apple", new int[] { 0, 1 }, "Snake_Base.Model.Apple", new string[] {
            "OnDataChanged: Snake_Base.Model.Playfield2D`1[Snake_Base.Model.SnakeGameObject]\to:\tn:Snake_Base.Model.Apple\tp:Items\r\n",
            ""})]
        [DataRow("Snake",  new int[] { 1, 0 }, "Snake_Base.Model.SnakeBodyPart", new string[] { 
            "OnDataChanged: Snake_Base.Model.Playfield2D`1[Snake_Base.Model.SnakeGameObject]\to:\tn:Snake_Base.Model.SnakeBodyPart\tp:Items\r\n",
            "" })]
        public void AddItemTest1(string sName,int[] p, string tind, string[] sExp)
        {
            Type? t = Assembly.GetAssembly(typeof(Playfield2D))?.GetType(tind);  
            t ??= Assembly.GetAssembly(typeof(TestItem))?.GetType(tind);
            var _testItem = Activator.CreateInstance(t);
            (_testItem as IPlacedObject)?.SetPlace(new Point(p[0], p[1]));
            if (_testItem is IParentedObject i) i.SetParent(testPlayfield);
            else
                (_testItem as SnakeGameObject)?.SetParent(testPlayfield);
            Assert.AreEqual(sExp[0], ResultData);
        }

        /// <summary>
        /// Defines the test method AddItemTest.
        /// </summary>
        [DataTestMethod()]
        [TestProperty("Author", "J.C.")]
        [TestCategory("AddData")]
        [DataRow("Nothing", new int[] { 0, 0 }, "Snake_Base.Model.Tests.TestItem", new string[] { 
            "New Parent: TestItem(,{X=0,Y=0})\to:\tn:Snake_Base.Model.Playfield2D`1[Snake_Base.Model.SnakeGameObject]\tp:AddItemTest2\r\n" })]
        [DataRow("Apple", new int[] { 0, 1 }, "Snake_Base.Model.Apple", new string[] { 
            "OnDataChanged: Snake_Base.Model.Playfield2D`1[Snake_Base.Model.SnakeGameObject]\to:\tn:Snake_Base.Model.Apple\tp:Items\r\nOnDataChanged: Snake_Base.Model.Apple\to:{X=0,Y=0}\tn:{X=0,Y=1}\tp:Place\r\n" })]
        [DataRow("Snake", new int[] { 1, 0 }, "Snake_Base.Model.SnakeBodyPart", new string[] {
            "OnDataChanged: Snake_Base.Model.Playfield2D`1[Snake_Base.Model.SnakeGameObject]\to:\tn:Snake_Base.Model.SnakeBodyPart\tp:Items\r\nOnDataChanged: Snake_Base.Model.SnakeBodyPart\to:{X=0,Y=0}\tn:{X=1,Y=0}\tp:Place\r\n" })]
        public void AddItemTest2(string sName, int[] p, string tind, string[] sExp)
        {
            Type? t = Assembly.GetAssembly(typeof(Playfield2D))?.GetType(tind);
            t ??= Assembly.GetAssembly(typeof(TestItem))?.GetType(tind);
            var _testItem = Activator.CreateInstance(t);
            if (_testItem is IParentedObject i) i.SetParent(testPlayfield);
            else
                (_testItem as SnakeGameObject)?.SetParent(testPlayfield); 
            (_testItem as IPlacedObject)?.SetPlace(new Point(p[0], p[1]));
            Assert.AreEqual(sExp[0], ResultData);
        }

        /// <summary>
        /// Defines the test method RemoveItemTest.
        /// </summary>
        [TestMethod()]
        public void RemoveItemTest()
        {
            Assert.Fail();
        }

        /// <summary>
        /// Defines the test method GetItemsTest.
        /// </summary>
        [TestMethod()]
        public void GetItemsTest()
        {
            Assert.Fail();
        }

        /// <summary>
        /// Logs the data changed.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The e.</param>
        /// <autogeneratedoc />
        private void LogDataChanged(object? sender, (string prop, object? oldVal, object? newVal) e)
        {
            ResultData += $"DataChange: {sender}\to:{e.oldVal}\tn:{e.newVal}\tc:{e.prop}\r\n";
        }

    }
}