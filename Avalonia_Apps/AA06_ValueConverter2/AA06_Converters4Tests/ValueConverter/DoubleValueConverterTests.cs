// ***********************************************************************
// Assembly         : AA06_ConvertersTests
// Author : Mir
// Created    : 05-11-2023
//
// Last Modified By : Mir
// Last Modified On : 05-11-2023
// ***********************************************************************
// <copyright file="CurrencyValueConverterTests.cs" company="AA06_ConvertersTests">
//    Copyright (c) JC-Soft. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Globalization;

/// <summary>
/// The Tests namespace.
/// </summary>
/// <autogeneratedoc />
namespace AA06_Converters_4.ValueConverter.Tests;


/// <summary>
/// Defines test class CurrencyValueConverterTests.
/// </summary>
/// <autogeneratedoc />
[TestClass()]
public class DoubleValueConverterTests
{
    /// <summary>
    /// The converter
    /// </summary>
    /// <autogeneratedoc />
    DoubleValueConverter testConv = new();

    [TestInitialize]
    public void Init()
    {
        testConv.FixedFactor = 100.0d;
        CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
        CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
    }

    /// <summary>
    /// Converts the correctly formats value.
    /// </summary>
    /// <param name="value">The value.</param>
    /// <param name="expected">The expected.</param>
    /// <autogeneratedoc />
    [DataTestMethod]
    [DataRow(10.5, "1050")]
    [DataRow(0.99, "99")]
    [DataRow("Hallo", "Hallo")]
    [DataRow(null, "")]
    public void ConvertTest(object? value, string expected)
    {
        if (value is double d) value = (double)d;
        var result = testConv.Convert(value!, typeof(string), null!, CultureInfo.InvariantCulture);
        Assert.AreEqual(expected, result);
    }

    /// <summary>
    /// Converts the correctly formats value.
    /// </summary>
    /// <param name="value">The value.</param>
    /// <param name="expected">The expected.</param>
    /// <autogeneratedoc />
    [DataTestMethod]
    [DataRow(10.5, "1050.00€")]
    [DataRow(0.99, "99.00€")]
    [DataRow("Hallo", "Hallo")]
    [DataRow(null, "")]
    public void ConvertTest2(object? value, string expected)
    {
        if (value is double d) value = (double)d;
        var result = testConv.Convert(value!, typeof(string), "0.00€", CultureInfo.InvariantCulture);
        Assert.AreEqual(expected, result);
    }

    /// <summary>
    /// Defines the test method ConvertBackTest.
    /// </summary>
    /// <autogeneratedoc />
    [DataTestMethod]
    [DataRow(10.5, "1050")]
    [DataRow(0.99, "99")]
    [DataRow(double.NaN, "Hallo")]
    [DataRow(double.NaN, "")]
    [DataRow(double.NaN, null)]
    public void ConvertBackTest(object? value, object expected)
    {
        var result = testConv.ConvertBack(expected, typeof(object), null!, CultureInfo.InvariantCulture);
        Assert.AreEqual(value, result);
    }
    /// <summary>
    /// Defines the test method ConvertBackTest.
    /// </summary>
    /// <autogeneratedoc />
    [DataTestMethod]
    [DataRow(10.5, "1050€")]
    [DataRow(0.99, "99€")]
    [DataRow(double.NaN, "Hallo")]
    [DataRow(double.NaN, "")]
    public void ConvertBackTest2(object? value, string expected)
    {
        var result = testConv.ConvertBack(expected, typeof(object), "0.00€", CultureInfo.InvariantCulture);
        Assert.AreEqual(value, result);
    }
    /// <summary>
    /// Defines the test method ConvertBackTest.
    /// </summary>
    /// <autogeneratedoc />
    [DataTestMethod]
    [DataRow(double.NaN, "Hallo")]
    [DataRow(double.NaN, "")]
    [DataRow(double.NaN, null)]
    public void ConvertBackTest3(object? value, string expected)
    {
        var result = testConv.ConvertBack(expected, typeof(object), "{0}", CultureInfo.InvariantCulture);
        Assert.AreEqual(value, result);
    }
}