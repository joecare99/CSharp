// ***********************************************************************
// Assembly         : BaseLib
// Author           : Mir
// Created          : 03-27-2023
//
// Last Modified By : Mir
// Last Modified On : 03-27-2023
// ***********************************************************************
// <copyright file="ByteUtils.cs" company="JC-Soft">
//     Copyright © JC-Soft 2023
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Drawing;

namespace BaseLib.Helper
{
    /// <summary>
    /// Class ByteUtils.
    /// </summary>
    /// <autogeneratedoc />
    public static class ByteUtils
    {

         ///<summary>
        /// return bit array with toggled SingleBit at Index
        /// </summary>
        public static int SwitchBit(this int bitArray, int index) 
            => bitArray ^ index.BitMask32();

        ///<summary>
        /// return bit array with toggled SingleBit at Index
        /// </summary>
        public static uint SwitchBit(this uint bitArray, int index)
            => bitArray ^ ((uint)index).BitMask32();

        ///<summary>
        /// return Bit array with toggled SingleBit at Index
        /// </summary>
        public static long SwitchBit(this long bitArray, int index)
            => bitArray ^ index.BitMask64();

         ///<summary>
        /// return bit array with set SingleBit at Index
        /// </summary>
        public static int SetBit(this int bitArray, int index)
            => bitArray | index.BitMask32();

        ///<summary>
        /// return bit array with set SingleBit at Index
        /// </summary>
        public static uint SetBit(this uint bitArray, int index)
            => bitArray | ((uint)index).BitMask32();

        ///<summary>
        /// return bit array with set SingleBit at Index
        /// </summary>
        public static long SetBit(this long bitArray, int index)
            => bitArray | index.BitMask64();

        ///<summary>
        /// return bit array with set SingleBit at Index
        /// </summary>
        public static int SetBit(this int bitArray, int index, bool xVal)
            => xVal ? bitArray.SetBit(index) : bitArray.ClearBit(index);

        ///<summary>
        /// return bit array with set SingleBit at Index
        /// </summary>
        public static uint SetBit(this uint bitArray, int index, bool xVal)
            => xVal ? bitArray.SetBit(index) : bitArray.ClearBit(index);

        ///<summary>
        /// return bit array with set SingleBit at Index
        /// </summary>
        public static long SetBit(this long bitArray, int index, bool xVal)
            => xVal ? bitArray.SetBit(index) : bitArray.ClearBit(index);

        ///<summary>
        /// return bit array with set SingleBit at Index
        /// </summary>
        public static bool GetBit(this int bitArray, int index)
            => (bitArray & index.BitMask32())!=0;

        ///<summary>
        /// return bit array with set SingleBit at Index
        /// </summary>
        public static bool GetBit(this uint bitArray, int index)
            => (bitArray & ((uint)index).BitMask32())!=0;

        ///<summary>
        /// return bit array with set SingleBit at Index
        /// </summary>
        public static bool GetBit(this long bitArray, int index)
            => (bitArray & index.BitMask64()) != 0;

        ///<summary>
        /// return bit array with cleared SingleBit at Index
        /// </summary>
        public static int ClearBit(this int bitArray, int index)
            => bitArray & ~index.BitMask32();

        ///<summary>
        /// return bit array with cleared SingleBit at Index
        /// </summary>
        public static uint ClearBit(this uint bitArray, int index)
            => bitArray & ~((uint)index).BitMask32();

        ///<summary>
        /// return bit array with cleared SingleBit at Index
        /// </summary>
        public static long ClearBit(this long bitArray, int index)
            => bitArray & ~index.BitMask64();

        /// <summary>
        ///  returns int Bitmask with 32Bits at bit [Bit] is 1 rest 0 
        /// </summary>
        /// <param name="bit"></param>
        /// <returns></returns>
        public static int BitMask32(this int bit) 
            => bit < 32 && bit >= 0 ? 0x01 << bit : throw new ArgumentException("out of range");

        /// <summary>
        /// returns unsinged Bitmask with 32Bits at BitNumber Bit is 1 rest 0
        /// </summary>
        /// <param name="bit"></param>
        /// <returns></returns>
        public static uint BitMask32(this uint bit) 
            => bit < 32 ? (uint)(0x01 << (int)bit) : throw new ArgumentException("out of range");

        /// <summary>
        /// returns long Bitmask with 64Bits at BitNumber Bit is 1 rest 0
        /// </summary>
        /// <param name="bit"></param>
        /// <returns></returns>
        public static long BitMask64(this int bit) 
            => bit < 64 && bit >= 0 ? 0x01L << bit : throw new ArgumentException("out of range");

            private static readonly sbyte[] bitCounts = [
                0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,
                1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,
                1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,
                2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
                1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,
                2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
                2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
                3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,
                1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,
                2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
                2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
                3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,
                2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,
                3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,
                3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,
                4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8
            ];

        /// <summary>
        /// returns the number of bits set in the bit array
        /// </summary>
        /// <param name="bit"></param>
        /// <returns></returns>
        public static int BitCount(this long bit)
            => BitCount(unchecked((ulong)bit));

        /// <summary>
        /// returns the number of bits set in the bit array
        /// </summary>
        /// <param name="bit"></param>
        /// <returns></returns>
        public static int BitCount(this ulong bit)
        {
            int count = 0;
            for (; bit != 0; bit >>= 8)
                count += bitCounts[bit & 0xff];
            return count;
        }

        /// <summary>
        /// returns the number of bits set in the bit array
        /// </summary>
        /// <param name="_bit"></param>
        /// <returns></returns>
/*
    SET @num = @num - ((@num / 2) & 0x5555555555555555)
    SET @num = (@num & 0x3333333333333333) + ((@num / 4) & 0x3333333333333333)
    SET @num = (@num + @num / 0x10) & 0x0F0F0F0F0F0F0F0F
    SET @num = @num + @num / 0x100
    SET @num = @num + @num / 0x10000
    SET @num = @num + @num / 0x100000000

    RETURN(@num & 0x3F) + @msb */
        public static int BitCount2(this long bit)
            =>BitCount2(unchecked((ulong) bit));
        public static int BitCount2(this ulong bit)
        {
            bit = bit - ((bit >> 1) & 0x5555555555555555);
            bit = (bit & 0x3333333333333333) + ((bit >> 2) & 0x3333333333333333);
            bit = (bit + (bit >> 4)) & 0x0F0F0F0F0F0F0F0F;
            bit = bit + (bit >> 8);
            bit = bit + (bit >> 16);
            bit = bit + (bit >> 32);
            return (int)(bit & 0x7F);
        }

    }
}
